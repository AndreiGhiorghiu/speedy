
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  username: string
  role: string
  password: string
  ballance: number | null
  secure: boolean | null
  status: string | null
  fee: number | null
  referenceId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Sessions
 * 
 */
export type Sessions = {
  id: string
  current: string
  userId: string
  expiresAt: Date
}

/**
 * Model Settings
 * 
 */
export type Settings = {
  id: string
  userId: string
  importerPresets: string
  theme: string
  canNotify: boolean
  canAlert: boolean
  alerts: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Database
 * 
 */
export type Database = {
  id: string
  name: string
  ownerId: string
  createdAt: Date
  updatedAt: Date
  status: string
  statisticsId: string | null
}

/**
 * Model Products
 * 
 */
export type Products = {
  id: string
  sellerId: string
  buyerId: string | null
  status: string
  price: number
  old_price: number | null
  cc_num: string
  cvv2: string
  skip: string | null
  full_name: string | null
  first_name: string | null
  last_name: string | null
  sort_code: string | null
  misc: string | null
  exp_date: string | null
  exp_month: number | null
  exp_year: number | null
  zip: string | null
  address: string | null
  address2: string | null
  city: string | null
  country: string | null
  ip: string | null
  type: string | null
  state: string | null
  phone: string | null
  dob: string | null
  ssn: string | null
  email: string | null
  password: string | null
  mmn: string | null
  vbv: string | null
  acc_no: string | null
  driver_license: string | null
  dbVersion: number
  canRefund: boolean
  refundExpire: Date | null
  wantRefund: boolean
  userId: string | null
  databaseId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Invoice
 * 
 */
export type Invoice = {
  id: string
  code: string
  total: number
  status: string
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Tickets
 * 
 */
export type Tickets = {
  id: string
  title: string
  category: string
  message: string
  status: string
  reporterId: string
  ticketsId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Site
 * 
 */
export type Site = {
  id: string
  ballance: number
  data: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Statistics
 * 
 */
export type Statistics = {
  id: string
  databaseId: string | null
  data: string
}

/**
 * Model BTC_Addresses
 * 
 */
export type BTC_Addresses = {
  id: string
  userId: string
  address: string
  status: string
  received_btc: number
  received_usd: number
  currentBtcPrice: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model News
 * 
 */
export type News = {
  id: string
  title: string
  priority: string
  description: string
  authorId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Actions
 * 
 */
export type Actions = {
  id: string
  type: string
  data: string
  userId: string | null
  created_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **Sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.SessionsDelegate<GlobalReject>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<GlobalReject>;

  /**
   * `prisma.database`: Exposes CRUD operations for the **Database** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Databases
    * const databases = await prisma.database.findMany()
    * ```
    */
  get database(): Prisma.DatabaseDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **Products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.ProductsDelegate<GlobalReject>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<GlobalReject>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **Tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.TicketsDelegate<GlobalReject>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<GlobalReject>;

  /**
   * `prisma.statistics`: Exposes CRUD operations for the **Statistics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statistics
    * const statistics = await prisma.statistics.findMany()
    * ```
    */
  get statistics(): Prisma.StatisticsDelegate<GlobalReject>;

  /**
   * `prisma.bTC_Addresses`: Exposes CRUD operations for the **BTC_Addresses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BTC_Addresses
    * const bTC_Addresses = await prisma.bTC_Addresses.findMany()
    * ```
    */
  get bTC_Addresses(): Prisma.BTC_AddressesDelegate<GlobalReject>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<GlobalReject>;

  /**
   * `prisma.actions`: Exposes CRUD operations for the **Actions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actions
    * const actions = await prisma.actions.findMany()
    * ```
    */
  get actions(): Prisma.ActionsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Sessions: 'Sessions',
    Settings: 'Settings',
    Database: 'Database',
    Products: 'Products',
    Invoice: 'Invoice',
    Tickets: 'Tickets',
    Site: 'Site',
    Statistics: 'Statistics',
    BTC_Addresses: 'BTC_Addresses',
    News: 'News',
    Actions: 'Actions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Sessions: number
    SellerProducts: number
    BuyerProducts: number
    Reference: number
    Products: number
    Database: number
    invoices: number
    my_tickets: number
    btc_addresses: number
    news: number
    actions: number
  }

  export type UserCountOutputTypeSelect = {
    Sessions?: boolean
    SellerProducts?: boolean
    BuyerProducts?: boolean
    Reference?: boolean
    Products?: boolean
    Database?: boolean
    invoices?: boolean
    my_tickets?: boolean
    btc_addresses?: boolean
    news?: boolean
    actions?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type DatabaseCountOutputType
   */


  export type DatabaseCountOutputType = {
    products: number
  }

  export type DatabaseCountOutputTypeSelect = {
    products?: boolean
  }

  export type DatabaseCountOutputTypeGetPayload<S extends boolean | null | undefined | DatabaseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DatabaseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DatabaseCountOutputTypeArgs)
    ? DatabaseCountOutputType 
    : S extends { select: any } & (DatabaseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DatabaseCountOutputType ? DatabaseCountOutputType[P] : never
  } 
      : DatabaseCountOutputType




  // Custom InputTypes

  /**
   * DatabaseCountOutputType without action
   */
  export type DatabaseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DatabaseCountOutputType
     */
    select?: DatabaseCountOutputTypeSelect | null
  }



  /**
   * Count Type TicketsCountOutputType
   */


  export type TicketsCountOutputType = {
    responses: number
  }

  export type TicketsCountOutputTypeSelect = {
    responses?: boolean
  }

  export type TicketsCountOutputTypeGetPayload<S extends boolean | null | undefined | TicketsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TicketsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TicketsCountOutputTypeArgs)
    ? TicketsCountOutputType 
    : S extends { select: any } & (TicketsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TicketsCountOutputType ? TicketsCountOutputType[P] : never
  } 
      : TicketsCountOutputType




  // Custom InputTypes

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    ballance: number | null
    fee: number | null
  }

  export type UserSumAggregateOutputType = {
    ballance: number | null
    fee: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    role: string | null
    password: string | null
    ballance: number | null
    secure: boolean | null
    status: string | null
    fee: number | null
    referenceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    role: string | null
    password: string | null
    ballance: number | null
    secure: boolean | null
    status: string | null
    fee: number | null
    referenceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    role: number
    password: number
    ballance: number
    secure: number
    status: number
    fee: number
    referenceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    ballance?: true
    fee?: true
  }

  export type UserSumAggregateInputType = {
    ballance?: true
    fee?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    role?: true
    password?: true
    ballance?: true
    secure?: true
    status?: true
    fee?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    role?: true
    password?: true
    ballance?: true
    secure?: true
    status?: true
    fee?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    role?: true
    password?: true
    ballance?: true
    secure?: true
    status?: true
    fee?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    role: string
    password: string
    ballance: number | null
    secure: boolean | null
    status: string | null
    fee: number | null
    referenceId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    role?: boolean
    password?: boolean
    ballance?: boolean
    secure?: boolean
    status?: boolean
    fee?: boolean
    referenceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean | SettingsArgs
    Sessions?: boolean | User$SessionsArgs
    SellerProducts?: boolean | User$SellerProductsArgs
    BuyerProducts?: boolean | User$BuyerProductsArgs
    Reference?: boolean | User$ReferenceArgs
    reference?: boolean | UserArgs
    Products?: boolean | User$ProductsArgs
    Database?: boolean | User$DatabaseArgs
    invoices?: boolean | User$invoicesArgs
    my_tickets?: boolean | User$my_ticketsArgs
    btc_addresses?: boolean | User$btc_addressesArgs
    news?: boolean | User$newsArgs
    actions?: boolean | User$actionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    settings?: boolean | SettingsArgs
    Sessions?: boolean | User$SessionsArgs
    SellerProducts?: boolean | User$SellerProductsArgs
    BuyerProducts?: boolean | User$BuyerProductsArgs
    Reference?: boolean | User$ReferenceArgs
    reference?: boolean | UserArgs
    Products?: boolean | User$ProductsArgs
    Database?: boolean | User$DatabaseArgs
    invoices?: boolean | User$invoicesArgs
    my_tickets?: boolean | User$my_ticketsArgs
    btc_addresses?: boolean | User$btc_addressesArgs
    news?: boolean | User$newsArgs
    actions?: boolean | User$actionsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'settings' ? SettingsGetPayload<S['include'][P]> | null :
        P extends 'Sessions' ? Array < SessionsGetPayload<S['include'][P]>>  :
        P extends 'SellerProducts' ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends 'BuyerProducts' ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends 'Reference' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'reference' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Products' ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends 'Database' ? Array < DatabaseGetPayload<S['include'][P]>>  :
        P extends 'invoices' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'my_tickets' ? Array < TicketsGetPayload<S['include'][P]>>  :
        P extends 'btc_addresses' ? Array < BTC_AddressesGetPayload<S['include'][P]>>  :
        P extends 'news' ? Array < NewsGetPayload<S['include'][P]>>  :
        P extends 'actions' ? Array < ActionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'settings' ? SettingsGetPayload<S['select'][P]> | null :
        P extends 'Sessions' ? Array < SessionsGetPayload<S['select'][P]>>  :
        P extends 'SellerProducts' ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends 'BuyerProducts' ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends 'Reference' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'reference' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Products' ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends 'Database' ? Array < DatabaseGetPayload<S['select'][P]>>  :
        P extends 'invoices' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'my_tickets' ? Array < TicketsGetPayload<S['select'][P]>>  :
        P extends 'btc_addresses' ? Array < BTC_AddressesGetPayload<S['select'][P]>>  :
        P extends 'news' ? Array < NewsGetPayload<S['select'][P]>>  :
        P extends 'actions' ? Array < ActionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    settings<T extends SettingsArgs= {}>(args?: Subset<T, SettingsArgs>): Prisma__SettingsClient<SettingsGetPayload<T> | Null>;

    Sessions<T extends User$SessionsArgs= {}>(args?: Subset<T, User$SessionsArgs>): Prisma.PrismaPromise<Array<SessionsGetPayload<T>>| Null>;

    SellerProducts<T extends User$SellerProductsArgs= {}>(args?: Subset<T, User$SellerProductsArgs>): Prisma.PrismaPromise<Array<ProductsGetPayload<T>>| Null>;

    BuyerProducts<T extends User$BuyerProductsArgs= {}>(args?: Subset<T, User$BuyerProductsArgs>): Prisma.PrismaPromise<Array<ProductsGetPayload<T>>| Null>;

    Reference<T extends User$ReferenceArgs= {}>(args?: Subset<T, User$ReferenceArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    reference<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Products<T extends User$ProductsArgs= {}>(args?: Subset<T, User$ProductsArgs>): Prisma.PrismaPromise<Array<ProductsGetPayload<T>>| Null>;

    Database<T extends User$DatabaseArgs= {}>(args?: Subset<T, User$DatabaseArgs>): Prisma.PrismaPromise<Array<DatabaseGetPayload<T>>| Null>;

    invoices<T extends User$invoicesArgs= {}>(args?: Subset<T, User$invoicesArgs>): Prisma.PrismaPromise<Array<InvoiceGetPayload<T>>| Null>;

    my_tickets<T extends User$my_ticketsArgs= {}>(args?: Subset<T, User$my_ticketsArgs>): Prisma.PrismaPromise<Array<TicketsGetPayload<T>>| Null>;

    btc_addresses<T extends User$btc_addressesArgs= {}>(args?: Subset<T, User$btc_addressesArgs>): Prisma.PrismaPromise<Array<BTC_AddressesGetPayload<T>>| Null>;

    news<T extends User$newsArgs= {}>(args?: Subset<T, User$newsArgs>): Prisma.PrismaPromise<Array<NewsGetPayload<T>>| Null>;

    actions<T extends User$actionsArgs= {}>(args?: Subset<T, User$actionsArgs>): Prisma.PrismaPromise<Array<ActionsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Sessions
   */
  export type User$SessionsArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    where?: SessionsWhereInput
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    cursor?: SessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * User.SellerProducts
   */
  export type User$SellerProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    cursor?: ProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * User.BuyerProducts
   */
  export type User$BuyerProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    cursor?: ProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * User.Reference
   */
  export type User$ReferenceArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User.Products
   */
  export type User$ProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    cursor?: ProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * User.Database
   */
  export type User$DatabaseArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    where?: DatabaseWhereInput
    orderBy?: Enumerable<DatabaseOrderByWithRelationInput>
    cursor?: DatabaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DatabaseScalarFieldEnum>
  }


  /**
   * User.invoices
   */
  export type User$invoicesArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * User.my_tickets
   */
  export type User$my_ticketsArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    where?: TicketsWhereInput
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TicketsScalarFieldEnum>
  }


  /**
   * User.btc_addresses
   */
  export type User$btc_addressesArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    where?: BTC_AddressesWhereInput
    orderBy?: Enumerable<BTC_AddressesOrderByWithRelationInput>
    cursor?: BTC_AddressesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BTC_AddressesScalarFieldEnum>
  }


  /**
   * User.news
   */
  export type User$newsArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    where?: NewsWhereInput
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    cursor?: NewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * User.actions
   */
  export type User$actionsArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    where?: ActionsWhereInput
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    cursor?: ActionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Sessions
   */


  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsMinAggregateOutputType = {
    id: string | null
    current: string | null
    userId: string | null
    expiresAt: Date | null
  }

  export type SessionsMaxAggregateOutputType = {
    id: string | null
    current: string | null
    userId: string | null
    expiresAt: Date | null
  }

  export type SessionsCountAggregateOutputType = {
    id: number
    current: number
    userId: number
    expiresAt: number
    _all: number
  }


  export type SessionsMinAggregateInputType = {
    id?: true
    current?: true
    userId?: true
    expiresAt?: true
  }

  export type SessionsMaxAggregateInputType = {
    id?: true
    current?: true
    userId?: true
    expiresAt?: true
  }

  export type SessionsCountAggregateInputType = {
    id?: true
    current?: true
    userId?: true
    expiresAt?: true
    _all?: true
  }

  export type SessionsAggregateArgs = {
    /**
     * Filter which Sessions to aggregate.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs = {
    where?: SessionsWhereInput
    orderBy?: Enumerable<SessionsOrderByWithAggregationInput>
    by: SessionsScalarFieldEnum[]
    having?: SessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }


  export type SessionsGroupByOutputType = {
    id: string
    current: string
    userId: string
    expiresAt: Date
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type SessionsSelect = {
    id?: boolean
    current?: boolean
    userId?: boolean
    expiresAt?: boolean
    user?: boolean | UserArgs
  }


  export type SessionsInclude = {
    user?: boolean | UserArgs
  }

  export type SessionsGetPayload<S extends boolean | null | undefined | SessionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Sessions :
    S extends undefined ? never :
    S extends { include: any } & (SessionsArgs | SessionsFindManyArgs)
    ? Sessions  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionsArgs | SessionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Sessions ? Sessions[P] : never
  } 
      : Sessions


  type SessionsCountArgs = 
    Omit<SessionsFindManyArgs, 'select' | 'include'> & {
      select?: SessionsCountAggregateInputType | true
    }

  export interface SessionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sessions that matches the filter.
     * @param {SessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sessions'> extends True ? Prisma__SessionsClient<SessionsGetPayload<T>> : Prisma__SessionsClient<SessionsGetPayload<T> | null, null>

    /**
     * Find one Sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionsFindUniqueOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionsFindUniqueOrThrowArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sessions'> extends True ? Prisma__SessionsClient<SessionsGetPayload<T>> : Prisma__SessionsClient<SessionsGetPayload<T> | null, null>

    /**
     * Find the first Sessions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionsFindFirstOrThrowArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionsWithIdOnly = await prisma.sessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionsFindManyArgs>(
      args?: SelectSubset<T, SessionsFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionsGetPayload<T>>>

    /**
     * Create a Sessions.
     * @param {SessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends SessionsCreateArgs>(
      args: SelectSubset<T, SessionsCreateArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Delete a Sessions.
     * @param {SessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends SessionsDeleteArgs>(
      args: SelectSubset<T, SessionsDeleteArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Update one Sessions.
     * @param {SessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionsUpdateArgs>(
      args: SelectSubset<T, SessionsUpdateArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionsDeleteManyArgs>(
      args?: SelectSubset<T, SessionsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionsUpdateManyArgs>(
      args: SelectSubset<T, SessionsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {SessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends SessionsUpsertArgs>(
      args: SelectSubset<T, SessionsUpsertArgs>
    ): Prisma__SessionsClient<SessionsGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionsCountArgs>(
      args?: Subset<T, SessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): Prisma.PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sessions base type for findUnique actions
   */
  export type SessionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions findUnique
   */
  export interface SessionsFindUniqueArgs extends SessionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sessions findUniqueOrThrow
   */
  export type SessionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions base type for findFirst actions
   */
  export type SessionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }

  /**
   * Sessions findFirst
   */
  export interface SessionsFindFirstArgs extends SessionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sessions findFirstOrThrow
   */
  export type SessionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * Sessions findMany
   */
  export type SessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * Sessions create
   */
  export type SessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * The data needed to create a Sessions.
     */
    data: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
  }


  /**
   * Sessions update
   */
  export type SessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * The data needed to update a Sessions.
     */
    data: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
    /**
     * Choose, which Sessions to update.
     */
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions updateMany
   */
  export type SessionsUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionsWhereInput
  }


  /**
   * Sessions upsert
   */
  export type SessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * The filter to search for the Sessions to update in case it exists.
     */
    where: SessionsWhereUniqueInput
    /**
     * In case the Sessions found by the `where` argument doesn't exist, create a new Sessions with this data.
     */
    create: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
    /**
     * In case the Sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
  }


  /**
   * Sessions delete
   */
  export type SessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
    /**
     * Filter which Sessions to delete.
     */
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions deleteMany
   */
  export type SessionsDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionsWhereInput
  }


  /**
   * Sessions without action
   */
  export type SessionsArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionsInclude | null
  }



  /**
   * Model Settings
   */


  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    importerPresets: string | null
    theme: string | null
    canNotify: boolean | null
    canAlert: boolean | null
    alerts: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    importerPresets: string | null
    theme: string | null
    canNotify: boolean | null
    canAlert: boolean | null
    alerts: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    userId: number
    importerPresets: number
    theme: number
    canNotify: number
    canAlert: number
    alerts: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingsMinAggregateInputType = {
    id?: true
    userId?: true
    importerPresets?: true
    theme?: true
    canNotify?: true
    canAlert?: true
    alerts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    importerPresets?: true
    theme?: true
    canNotify?: true
    canAlert?: true
    alerts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    userId?: true
    importerPresets?: true
    theme?: true
    canNotify?: true
    canAlert?: true
    alerts?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingsAggregateArgs = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: Enumerable<SettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs = {
    where?: SettingsWhereInput
    orderBy?: Enumerable<SettingsOrderByWithAggregationInput>
    by: SettingsScalarFieldEnum[]
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }


  export type SettingsGroupByOutputType = {
    id: string
    userId: string
    importerPresets: string
    theme: string
    canNotify: boolean
    canAlert: boolean
    alerts: string
    createdAt: Date
    updatedAt: Date
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect = {
    id?: boolean
    userId?: boolean
    importerPresets?: boolean
    theme?: boolean
    canNotify?: boolean
    canAlert?: boolean
    alerts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }


  export type SettingsInclude = {
    user?: boolean | UserArgs
  }

  export type SettingsGetPayload<S extends boolean | null | undefined | SettingsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Settings :
    S extends undefined ? never :
    S extends { include: any } & (SettingsArgs | SettingsFindManyArgs)
    ? Settings  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SettingsArgs | SettingsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Settings ? Settings[P] : never
  } 
      : Settings


  type SettingsCountArgs = 
    Omit<SettingsFindManyArgs, 'select' | 'include'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Settings'> extends True ? Prisma__SettingsClient<SettingsGetPayload<T>> : Prisma__SettingsClient<SettingsGetPayload<T> | null, null>

    /**
     * Find one Settings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SettingsFindUniqueOrThrowArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Settings'> extends True ? Prisma__SettingsClient<SettingsGetPayload<T>> : Prisma__SettingsClient<SettingsGetPayload<T> | null, null>

    /**
     * Find the first Settings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SettingsFindFirstOrThrowArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SettingsFindManyArgs>(
      args?: SelectSubset<T, SettingsFindManyArgs>
    ): Prisma.PrismaPromise<Array<SettingsGetPayload<T>>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
    **/
    create<T extends SettingsCreateArgs>(
      args: SelectSubset<T, SettingsCreateArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
    **/
    delete<T extends SettingsDeleteArgs>(
      args: SelectSubset<T, SettingsDeleteArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SettingsUpdateArgs>(
      args: SelectSubset<T, SettingsUpdateArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SettingsDeleteManyArgs>(
      args?: SelectSubset<T, SettingsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SettingsUpdateManyArgs>(
      args: SelectSubset<T, SettingsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
    **/
    upsert<T extends SettingsUpsertArgs>(
      args: SelectSubset<T, SettingsUpsertArgs>
    ): Prisma__SettingsClient<SettingsGetPayload<T>>

    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SettingsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Settings base type for findUnique actions
   */
  export type SettingsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUnique
   */
  export interface SettingsFindUniqueArgs extends SettingsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }


  /**
   * Settings base type for findFirst actions
   */
  export type SettingsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: Enumerable<SettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: Enumerable<SettingsScalarFieldEnum>
  }

  /**
   * Settings findFirst
   */
  export interface SettingsFindFirstArgs extends SettingsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: Enumerable<SettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: Enumerable<SettingsScalarFieldEnum>
  }


  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: Enumerable<SettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: Enumerable<SettingsScalarFieldEnum>
  }


  /**
   * Settings create
   */
  export type SettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }


  /**
   * Settings update
   */
  export type SettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }


  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
  }


  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }


  /**
   * Settings delete
   */
  export type SettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }


  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
  }


  /**
   * Settings without action
   */
  export type SettingsArgs = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SettingsInclude | null
  }



  /**
   * Model Database
   */


  export type AggregateDatabase = {
    _count: DatabaseCountAggregateOutputType | null
    _min: DatabaseMinAggregateOutputType | null
    _max: DatabaseMaxAggregateOutputType | null
  }

  export type DatabaseMinAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    statisticsId: string | null
  }

  export type DatabaseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    statisticsId: string | null
  }

  export type DatabaseCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    createdAt: number
    updatedAt: number
    status: number
    statisticsId: number
    _all: number
  }


  export type DatabaseMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    statisticsId?: true
  }

  export type DatabaseMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    statisticsId?: true
  }

  export type DatabaseCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    statisticsId?: true
    _all?: true
  }

  export type DatabaseAggregateArgs = {
    /**
     * Filter which Database to aggregate.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: Enumerable<DatabaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Databases
    **/
    _count?: true | DatabaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DatabaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DatabaseMaxAggregateInputType
  }

  export type GetDatabaseAggregateType<T extends DatabaseAggregateArgs> = {
        [P in keyof T & keyof AggregateDatabase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDatabase[P]>
      : GetScalarType<T[P], AggregateDatabase[P]>
  }




  export type DatabaseGroupByArgs = {
    where?: DatabaseWhereInput
    orderBy?: Enumerable<DatabaseOrderByWithAggregationInput>
    by: DatabaseScalarFieldEnum[]
    having?: DatabaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DatabaseCountAggregateInputType | true
    _min?: DatabaseMinAggregateInputType
    _max?: DatabaseMaxAggregateInputType
  }


  export type DatabaseGroupByOutputType = {
    id: string
    name: string
    ownerId: string
    createdAt: Date
    updatedAt: Date
    status: string
    statisticsId: string | null
    _count: DatabaseCountAggregateOutputType | null
    _min: DatabaseMinAggregateOutputType | null
    _max: DatabaseMaxAggregateOutputType | null
  }

  type GetDatabaseGroupByPayload<T extends DatabaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DatabaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DatabaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DatabaseGroupByOutputType[P]>
            : GetScalarType<T[P], DatabaseGroupByOutputType[P]>
        }
      >
    >


  export type DatabaseSelect = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    statisticsId?: boolean
    owner?: boolean | UserArgs
    products?: boolean | Database$productsArgs
    statistics?: boolean | StatisticsArgs
    _count?: boolean | DatabaseCountOutputTypeArgs
  }


  export type DatabaseInclude = {
    owner?: boolean | UserArgs
    products?: boolean | Database$productsArgs
    statistics?: boolean | StatisticsArgs
    _count?: boolean | DatabaseCountOutputTypeArgs
  }

  export type DatabaseGetPayload<S extends boolean | null | undefined | DatabaseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Database :
    S extends undefined ? never :
    S extends { include: any } & (DatabaseArgs | DatabaseFindManyArgs)
    ? Database  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'products' ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends 'statistics' ? StatisticsGetPayload<S['include'][P]> | null :
        P extends '_count' ? DatabaseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DatabaseArgs | DatabaseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'products' ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends 'statistics' ? StatisticsGetPayload<S['select'][P]> | null :
        P extends '_count' ? DatabaseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Database ? Database[P] : never
  } 
      : Database


  type DatabaseCountArgs = 
    Omit<DatabaseFindManyArgs, 'select' | 'include'> & {
      select?: DatabaseCountAggregateInputType | true
    }

  export interface DatabaseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Database that matches the filter.
     * @param {DatabaseFindUniqueArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DatabaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DatabaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Database'> extends True ? Prisma__DatabaseClient<DatabaseGetPayload<T>> : Prisma__DatabaseClient<DatabaseGetPayload<T> | null, null>

    /**
     * Find one Database that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DatabaseFindUniqueOrThrowArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DatabaseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DatabaseFindUniqueOrThrowArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Find the first Database that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindFirstArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DatabaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DatabaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Database'> extends True ? Prisma__DatabaseClient<DatabaseGetPayload<T>> : Prisma__DatabaseClient<DatabaseGetPayload<T> | null, null>

    /**
     * Find the first Database that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindFirstOrThrowArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DatabaseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DatabaseFindFirstOrThrowArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Find zero or more Databases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Databases
     * const databases = await prisma.database.findMany()
     * 
     * // Get first 10 Databases
     * const databases = await prisma.database.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const databaseWithIdOnly = await prisma.database.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DatabaseFindManyArgs>(
      args?: SelectSubset<T, DatabaseFindManyArgs>
    ): Prisma.PrismaPromise<Array<DatabaseGetPayload<T>>>

    /**
     * Create a Database.
     * @param {DatabaseCreateArgs} args - Arguments to create a Database.
     * @example
     * // Create one Database
     * const Database = await prisma.database.create({
     *   data: {
     *     // ... data to create a Database
     *   }
     * })
     * 
    **/
    create<T extends DatabaseCreateArgs>(
      args: SelectSubset<T, DatabaseCreateArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Delete a Database.
     * @param {DatabaseDeleteArgs} args - Arguments to delete one Database.
     * @example
     * // Delete one Database
     * const Database = await prisma.database.delete({
     *   where: {
     *     // ... filter to delete one Database
     *   }
     * })
     * 
    **/
    delete<T extends DatabaseDeleteArgs>(
      args: SelectSubset<T, DatabaseDeleteArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Update one Database.
     * @param {DatabaseUpdateArgs} args - Arguments to update one Database.
     * @example
     * // Update one Database
     * const database = await prisma.database.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DatabaseUpdateArgs>(
      args: SelectSubset<T, DatabaseUpdateArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Delete zero or more Databases.
     * @param {DatabaseDeleteManyArgs} args - Arguments to filter Databases to delete.
     * @example
     * // Delete a few Databases
     * const { count } = await prisma.database.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DatabaseDeleteManyArgs>(
      args?: SelectSubset<T, DatabaseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Databases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Databases
     * const database = await prisma.database.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DatabaseUpdateManyArgs>(
      args: SelectSubset<T, DatabaseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Database.
     * @param {DatabaseUpsertArgs} args - Arguments to update or create a Database.
     * @example
     * // Update or create a Database
     * const database = await prisma.database.upsert({
     *   create: {
     *     // ... data to create a Database
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Database we want to update
     *   }
     * })
    **/
    upsert<T extends DatabaseUpsertArgs>(
      args: SelectSubset<T, DatabaseUpsertArgs>
    ): Prisma__DatabaseClient<DatabaseGetPayload<T>>

    /**
     * Count the number of Databases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseCountArgs} args - Arguments to filter Databases to count.
     * @example
     * // Count the number of Databases
     * const count = await prisma.database.count({
     *   where: {
     *     // ... the filter for the Databases we want to count
     *   }
     * })
    **/
    count<T extends DatabaseCountArgs>(
      args?: Subset<T, DatabaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DatabaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Database.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DatabaseAggregateArgs>(args: Subset<T, DatabaseAggregateArgs>): Prisma.PrismaPromise<GetDatabaseAggregateType<T>>

    /**
     * Group by Database.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DatabaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DatabaseGroupByArgs['orderBy'] }
        : { orderBy?: DatabaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DatabaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDatabaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Database.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DatabaseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    products<T extends Database$productsArgs= {}>(args?: Subset<T, Database$productsArgs>): Prisma.PrismaPromise<Array<ProductsGetPayload<T>>| Null>;

    statistics<T extends StatisticsArgs= {}>(args?: Subset<T, StatisticsArgs>): Prisma__StatisticsClient<StatisticsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Database base type for findUnique actions
   */
  export type DatabaseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter, which Database to fetch.
     */
    where: DatabaseWhereUniqueInput
  }

  /**
   * Database findUnique
   */
  export interface DatabaseFindUniqueArgs extends DatabaseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Database findUniqueOrThrow
   */
  export type DatabaseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter, which Database to fetch.
     */
    where: DatabaseWhereUniqueInput
  }


  /**
   * Database base type for findFirst actions
   */
  export type DatabaseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter, which Database to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: Enumerable<DatabaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Databases.
     */
    distinct?: Enumerable<DatabaseScalarFieldEnum>
  }

  /**
   * Database findFirst
   */
  export interface DatabaseFindFirstArgs extends DatabaseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Database findFirstOrThrow
   */
  export type DatabaseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter, which Database to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: Enumerable<DatabaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Databases.
     */
    distinct?: Enumerable<DatabaseScalarFieldEnum>
  }


  /**
   * Database findMany
   */
  export type DatabaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter, which Databases to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: Enumerable<DatabaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    distinct?: Enumerable<DatabaseScalarFieldEnum>
  }


  /**
   * Database create
   */
  export type DatabaseCreateArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * The data needed to create a Database.
     */
    data: XOR<DatabaseCreateInput, DatabaseUncheckedCreateInput>
  }


  /**
   * Database update
   */
  export type DatabaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * The data needed to update a Database.
     */
    data: XOR<DatabaseUpdateInput, DatabaseUncheckedUpdateInput>
    /**
     * Choose, which Database to update.
     */
    where: DatabaseWhereUniqueInput
  }


  /**
   * Database updateMany
   */
  export type DatabaseUpdateManyArgs = {
    /**
     * The data used to update Databases.
     */
    data: XOR<DatabaseUpdateManyMutationInput, DatabaseUncheckedUpdateManyInput>
    /**
     * Filter which Databases to update
     */
    where?: DatabaseWhereInput
  }


  /**
   * Database upsert
   */
  export type DatabaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * The filter to search for the Database to update in case it exists.
     */
    where: DatabaseWhereUniqueInput
    /**
     * In case the Database found by the `where` argument doesn't exist, create a new Database with this data.
     */
    create: XOR<DatabaseCreateInput, DatabaseUncheckedCreateInput>
    /**
     * In case the Database was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DatabaseUpdateInput, DatabaseUncheckedUpdateInput>
  }


  /**
   * Database delete
   */
  export type DatabaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
    /**
     * Filter which Database to delete.
     */
    where: DatabaseWhereUniqueInput
  }


  /**
   * Database deleteMany
   */
  export type DatabaseDeleteManyArgs = {
    /**
     * Filter which Databases to delete
     */
    where?: DatabaseWhereInput
  }


  /**
   * Database.products
   */
  export type Database$productsArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    cursor?: ProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Database without action
   */
  export type DatabaseArgs = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DatabaseInclude | null
  }



  /**
   * Model Products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    price: number | null
    old_price: number | null
    exp_month: number | null
    exp_year: number | null
    dbVersion: number | null
  }

  export type ProductsSumAggregateOutputType = {
    price: number | null
    old_price: number | null
    exp_month: number | null
    exp_year: number | null
    dbVersion: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: string | null
    sellerId: string | null
    buyerId: string | null
    status: string | null
    price: number | null
    old_price: number | null
    cc_num: string | null
    cvv2: string | null
    skip: string | null
    full_name: string | null
    first_name: string | null
    last_name: string | null
    sort_code: string | null
    misc: string | null
    exp_date: string | null
    exp_month: number | null
    exp_year: number | null
    zip: string | null
    address: string | null
    address2: string | null
    city: string | null
    country: string | null
    ip: string | null
    type: string | null
    state: string | null
    phone: string | null
    dob: string | null
    ssn: string | null
    email: string | null
    password: string | null
    mmn: string | null
    vbv: string | null
    acc_no: string | null
    driver_license: string | null
    dbVersion: number | null
    canRefund: boolean | null
    refundExpire: Date | null
    wantRefund: boolean | null
    userId: string | null
    databaseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: string | null
    sellerId: string | null
    buyerId: string | null
    status: string | null
    price: number | null
    old_price: number | null
    cc_num: string | null
    cvv2: string | null
    skip: string | null
    full_name: string | null
    first_name: string | null
    last_name: string | null
    sort_code: string | null
    misc: string | null
    exp_date: string | null
    exp_month: number | null
    exp_year: number | null
    zip: string | null
    address: string | null
    address2: string | null
    city: string | null
    country: string | null
    ip: string | null
    type: string | null
    state: string | null
    phone: string | null
    dob: string | null
    ssn: string | null
    email: string | null
    password: string | null
    mmn: string | null
    vbv: string | null
    acc_no: string | null
    driver_license: string | null
    dbVersion: number | null
    canRefund: boolean | null
    refundExpire: Date | null
    wantRefund: boolean | null
    userId: string | null
    databaseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    sellerId: number
    buyerId: number
    status: number
    price: number
    old_price: number
    cc_num: number
    cvv2: number
    skip: number
    full_name: number
    first_name: number
    last_name: number
    sort_code: number
    misc: number
    exp_date: number
    exp_month: number
    exp_year: number
    zip: number
    address: number
    address2: number
    city: number
    country: number
    ip: number
    type: number
    state: number
    phone: number
    dob: number
    ssn: number
    email: number
    password: number
    mmn: number
    vbv: number
    acc_no: number
    driver_license: number
    dbVersion: number
    canRefund: number
    refundExpire: number
    wantRefund: number
    userId: number
    databaseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    price?: true
    old_price?: true
    exp_month?: true
    exp_year?: true
    dbVersion?: true
  }

  export type ProductsSumAggregateInputType = {
    price?: true
    old_price?: true
    exp_month?: true
    exp_year?: true
    dbVersion?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    sellerId?: true
    buyerId?: true
    status?: true
    price?: true
    old_price?: true
    cc_num?: true
    cvv2?: true
    skip?: true
    full_name?: true
    first_name?: true
    last_name?: true
    sort_code?: true
    misc?: true
    exp_date?: true
    exp_month?: true
    exp_year?: true
    zip?: true
    address?: true
    address2?: true
    city?: true
    country?: true
    ip?: true
    type?: true
    state?: true
    phone?: true
    dob?: true
    ssn?: true
    email?: true
    password?: true
    mmn?: true
    vbv?: true
    acc_no?: true
    driver_license?: true
    dbVersion?: true
    canRefund?: true
    refundExpire?: true
    wantRefund?: true
    userId?: true
    databaseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    sellerId?: true
    buyerId?: true
    status?: true
    price?: true
    old_price?: true
    cc_num?: true
    cvv2?: true
    skip?: true
    full_name?: true
    first_name?: true
    last_name?: true
    sort_code?: true
    misc?: true
    exp_date?: true
    exp_month?: true
    exp_year?: true
    zip?: true
    address?: true
    address2?: true
    city?: true
    country?: true
    ip?: true
    type?: true
    state?: true
    phone?: true
    dob?: true
    ssn?: true
    email?: true
    password?: true
    mmn?: true
    vbv?: true
    acc_no?: true
    driver_license?: true
    dbVersion?: true
    canRefund?: true
    refundExpire?: true
    wantRefund?: true
    userId?: true
    databaseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    sellerId?: true
    buyerId?: true
    status?: true
    price?: true
    old_price?: true
    cc_num?: true
    cvv2?: true
    skip?: true
    full_name?: true
    first_name?: true
    last_name?: true
    sort_code?: true
    misc?: true
    exp_date?: true
    exp_month?: true
    exp_year?: true
    zip?: true
    address?: true
    address2?: true
    city?: true
    country?: true
    ip?: true
    type?: true
    state?: true
    phone?: true
    dob?: true
    ssn?: true
    email?: true
    password?: true
    mmn?: true
    vbv?: true
    acc_no?: true
    driver_license?: true
    dbVersion?: true
    canRefund?: true
    refundExpire?: true
    wantRefund?: true
    userId?: true
    databaseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which Products to aggregate.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithAggregationInput>
    by: ProductsScalarFieldEnum[]
    having?: ProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: string
    sellerId: string
    buyerId: string | null
    status: string
    price: number
    old_price: number | null
    cc_num: string
    cvv2: string
    skip: string | null
    full_name: string | null
    first_name: string | null
    last_name: string | null
    sort_code: string | null
    misc: string | null
    exp_date: string | null
    exp_month: number | null
    exp_year: number | null
    zip: string | null
    address: string | null
    address2: string | null
    city: string | null
    country: string | null
    ip: string | null
    type: string | null
    state: string | null
    phone: string | null
    dob: string | null
    ssn: string | null
    email: string | null
    password: string | null
    mmn: string | null
    vbv: string | null
    acc_no: string | null
    driver_license: string | null
    dbVersion: number
    canRefund: boolean
    refundExpire: Date | null
    wantRefund: boolean
    userId: string | null
    databaseId: string
    createdAt: Date
    updatedAt: Date
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type ProductsSelect = {
    id?: boolean
    sellerId?: boolean
    buyerId?: boolean
    status?: boolean
    price?: boolean
    old_price?: boolean
    cc_num?: boolean
    cvv2?: boolean
    skip?: boolean
    full_name?: boolean
    first_name?: boolean
    last_name?: boolean
    sort_code?: boolean
    misc?: boolean
    exp_date?: boolean
    exp_month?: boolean
    exp_year?: boolean
    zip?: boolean
    address?: boolean
    address2?: boolean
    city?: boolean
    country?: boolean
    ip?: boolean
    type?: boolean
    state?: boolean
    phone?: boolean
    dob?: boolean
    ssn?: boolean
    email?: boolean
    password?: boolean
    mmn?: boolean
    vbv?: boolean
    acc_no?: boolean
    driver_license?: boolean
    dbVersion?: boolean
    canRefund?: boolean
    refundExpire?: boolean
    wantRefund?: boolean
    userId?: boolean
    databaseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seller?: boolean | UserArgs
    buyer?: boolean | UserArgs
    User?: boolean | UserArgs
    database?: boolean | DatabaseArgs
  }


  export type ProductsInclude = {
    seller?: boolean | UserArgs
    buyer?: boolean | UserArgs
    User?: boolean | UserArgs
    database?: boolean | DatabaseArgs
  }

  export type ProductsGetPayload<S extends boolean | null | undefined | ProductsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Products :
    S extends undefined ? never :
    S extends { include: any } & (ProductsArgs | ProductsFindManyArgs)
    ? Products  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'seller' ? UserGetPayload<S['include'][P]> :
        P extends 'buyer' ? UserGetPayload<S['include'][P]> | null :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends 'database' ? DatabaseGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductsArgs | ProductsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'seller' ? UserGetPayload<S['select'][P]> :
        P extends 'buyer' ? UserGetPayload<S['select'][P]> | null :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends 'database' ? DatabaseGetPayload<S['select'][P]> :  P extends keyof Products ? Products[P] : never
  } 
      : Products


  type ProductsCountArgs = 
    Omit<ProductsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface ProductsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Products that matches the filter.
     * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Products'> extends True ? Prisma__ProductsClient<ProductsGetPayload<T>> : Prisma__ProductsClient<ProductsGetPayload<T> | null, null>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductsFindUniqueOrThrowArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Products'> extends True ? Prisma__ProductsClient<ProductsGetPayload<T>> : Prisma__ProductsClient<ProductsGetPayload<T> | null, null>

    /**
     * Find the first Products that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductsFindFirstOrThrowArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsFindManyArgs>(
      args?: SelectSubset<T, ProductsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProductsGetPayload<T>>>

    /**
     * Create a Products.
     * @param {ProductsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends ProductsCreateArgs>(
      args: SelectSubset<T, ProductsCreateArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Delete a Products.
     * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends ProductsDeleteArgs>(
      args: SelectSubset<T, ProductsDeleteArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Update one Products.
     * @param {ProductsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsUpdateArgs>(
      args: SelectSubset<T, ProductsUpdateArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsDeleteManyArgs>(
      args?: SelectSubset<T, ProductsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsUpdateManyArgs>(
      args: SelectSubset<T, ProductsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsUpsertArgs>(
      args: SelectSubset<T, ProductsUpsertArgs>
    ): Prisma__ProductsClient<ProductsGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductsCountArgs>(
      args?: Subset<T, ProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    seller<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    buyer<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    database<T extends DatabaseArgs= {}>(args?: Subset<T, DatabaseArgs>): Prisma__DatabaseClient<DatabaseGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Products base type for findUnique actions
   */
  export type ProductsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }

  /**
   * Products findUnique
   */
  export interface ProductsFindUniqueArgs extends ProductsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Products findUniqueOrThrow
   */
  export type ProductsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products base type for findFirst actions
   */
  export type ProductsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }

  /**
   * Products findFirst
   */
  export interface ProductsFindFirstArgs extends ProductsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Products findFirstOrThrow
   */
  export type ProductsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products findMany
   */
  export type ProductsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products create
   */
  export type ProductsCreateArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * The data needed to create a Products.
     */
    data: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
  }


  /**
   * Products update
   */
  export type ProductsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * The data needed to update a Products.
     */
    data: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
    /**
     * Choose, which Products to update.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products updateMany
   */
  export type ProductsUpdateManyArgs = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductsWhereInput
  }


  /**
   * Products upsert
   */
  export type ProductsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * The filter to search for the Products to update in case it exists.
     */
    where: ProductsWhereUniqueInput
    /**
     * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
     */
    create: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
    /**
     * In case the Products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
  }


  /**
   * Products delete
   */
  export type ProductsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
    /**
     * Filter which Products to delete.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products deleteMany
   */
  export type ProductsDeleteManyArgs = {
    /**
     * Filter which Products to delete
     */
    where?: ProductsWhereInput
  }


  /**
   * Products without action
   */
  export type ProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude | null
  }



  /**
   * Model Invoice
   */


  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    total: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    total: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    code: string | null
    total: number | null
    status: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    code: string | null
    total: number | null
    status: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    code: number
    total: number
    status: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    total?: true
  }

  export type InvoiceSumAggregateInputType = {
    total?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    code?: true
    total?: true
    status?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    code?: true
    total?: true
    status?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    code?: true
    total?: true
    status?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs = {
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithAggregationInput>
    by: InvoiceScalarFieldEnum[]
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }


  export type InvoiceGroupByOutputType = {
    id: string
    code: string
    total: number
    status: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect = {
    id?: boolean
    code?: boolean
    total?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }


  export type InvoiceInclude = {
    user?: boolean | UserArgs
  }

  export type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Invoice :
    S extends undefined ? never :
    S extends { include: any } & (InvoiceArgs | InvoiceFindManyArgs)
    ? Invoice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (InvoiceArgs | InvoiceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Invoice ? Invoice[P] : never
  } 
      : Invoice


  type InvoiceCountArgs = 
    Omit<InvoiceFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invoice'> extends True ? Prisma__InvoiceClient<InvoiceGetPayload<T>> : Prisma__InvoiceClient<InvoiceGetPayload<T> | null, null>

    /**
     * Find one Invoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InvoiceFindUniqueOrThrowArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invoice'> extends True ? Prisma__InvoiceClient<InvoiceGetPayload<T>> : Prisma__InvoiceClient<InvoiceGetPayload<T> | null, null>

    /**
     * Find the first Invoice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs>(
      args?: SelectSubset<T, InvoiceFindManyArgs>
    ): Prisma.PrismaPromise<Array<InvoiceGetPayload<T>>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs>(
      args: SelectSubset<T, InvoiceCreateArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs>(
      args: SelectSubset<T, InvoiceDeleteArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs>(
      args: SelectSubset<T, InvoiceUpdateArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs>(
      args: SelectSubset<T, InvoiceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs>(
      args: SelectSubset<T, InvoiceUpsertArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Invoice base type for findUnique actions
   */
  export type InvoiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUnique
   */
  export interface InvoiceFindUniqueArgs extends InvoiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice base type for findFirst actions
   */
  export type InvoiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }

  /**
   * Invoice findFirst
   */
  export interface InvoiceFindFirstArgs extends InvoiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
  }


  /**
   * Invoice without action
   */
  export type InvoiceArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude | null
  }



  /**
   * Model Tickets
   */


  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsMinAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    message: string | null
    status: string | null
    reporterId: string | null
    ticketsId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    message: string | null
    status: string | null
    reporterId: string | null
    ticketsId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    title: number
    category: number
    message: number
    status: number
    reporterId: number
    ticketsId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TicketsMinAggregateInputType = {
    id?: true
    title?: true
    category?: true
    message?: true
    status?: true
    reporterId?: true
    ticketsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    title?: true
    category?: true
    message?: true
    status?: true
    reporterId?: true
    ticketsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    title?: true
    category?: true
    message?: true
    status?: true
    reporterId?: true
    ticketsId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TicketsAggregateArgs = {
    /**
     * Filter which Tickets to aggregate.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type TicketsGroupByArgs = {
    where?: TicketsWhereInput
    orderBy?: Enumerable<TicketsOrderByWithAggregationInput>
    by: TicketsScalarFieldEnum[]
    having?: TicketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }


  export type TicketsGroupByOutputType = {
    id: string
    title: string
    category: string
    message: string
    status: string
    reporterId: string
    ticketsId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TicketsCountAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends TicketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type TicketsSelect = {
    id?: boolean
    title?: boolean
    category?: boolean
    message?: boolean
    status?: boolean
    reporterId?: boolean
    ticketsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserArgs
    parent?: boolean | TicketsArgs
    responses?: boolean | Tickets$responsesArgs
    _count?: boolean | TicketsCountOutputTypeArgs
  }


  export type TicketsInclude = {
    reporter?: boolean | UserArgs
    parent?: boolean | TicketsArgs
    responses?: boolean | Tickets$responsesArgs
    _count?: boolean | TicketsCountOutputTypeArgs
  }

  export type TicketsGetPayload<S extends boolean | null | undefined | TicketsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tickets :
    S extends undefined ? never :
    S extends { include: any } & (TicketsArgs | TicketsFindManyArgs)
    ? Tickets  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'reporter' ? UserGetPayload<S['include'][P]> :
        P extends 'parent' ? TicketsGetPayload<S['include'][P]> | null :
        P extends 'responses' ? Array < TicketsGetPayload<S['include'][P]>>  :
        P extends '_count' ? TicketsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TicketsArgs | TicketsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'reporter' ? UserGetPayload<S['select'][P]> :
        P extends 'parent' ? TicketsGetPayload<S['select'][P]> | null :
        P extends 'responses' ? Array < TicketsGetPayload<S['select'][P]>>  :
        P extends '_count' ? TicketsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tickets ? Tickets[P] : never
  } 
      : Tickets


  type TicketsCountArgs = 
    Omit<TicketsFindManyArgs, 'select' | 'include'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface TicketsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Tickets that matches the filter.
     * @param {TicketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TicketsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TicketsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tickets'> extends True ? Prisma__TicketsClient<TicketsGetPayload<T>> : Prisma__TicketsClient<TicketsGetPayload<T> | null, null>

    /**
     * Find one Tickets that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TicketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TicketsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TicketsFindUniqueOrThrowArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TicketsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TicketsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tickets'> extends True ? Prisma__TicketsClient<TicketsGetPayload<T>> : Prisma__TicketsClient<TicketsGetPayload<T> | null, null>

    /**
     * Find the first Tickets that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TicketsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TicketsFindFirstOrThrowArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TicketsFindManyArgs>(
      args?: SelectSubset<T, TicketsFindManyArgs>
    ): Prisma.PrismaPromise<Array<TicketsGetPayload<T>>>

    /**
     * Create a Tickets.
     * @param {TicketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
    **/
    create<T extends TicketsCreateArgs>(
      args: SelectSubset<T, TicketsCreateArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Delete a Tickets.
     * @param {TicketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
    **/
    delete<T extends TicketsDeleteArgs>(
      args: SelectSubset<T, TicketsDeleteArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Update one Tickets.
     * @param {TicketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TicketsUpdateArgs>(
      args: SelectSubset<T, TicketsUpdateArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Delete zero or more Tickets.
     * @param {TicketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TicketsDeleteManyArgs>(
      args?: SelectSubset<T, TicketsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TicketsUpdateManyArgs>(
      args: SelectSubset<T, TicketsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tickets.
     * @param {TicketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
    **/
    upsert<T extends TicketsUpsertArgs>(
      args: SelectSubset<T, TicketsUpsertArgs>
    ): Prisma__TicketsClient<TicketsGetPayload<T>>

    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketsCountArgs>(
      args?: Subset<T, TicketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsGroupByArgs['orderBy'] }
        : { orderBy?: TicketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TicketsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    reporter<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    parent<T extends TicketsArgs= {}>(args?: Subset<T, TicketsArgs>): Prisma__TicketsClient<TicketsGetPayload<T> | Null>;

    responses<T extends Tickets$responsesArgs= {}>(args?: Subset<T, Tickets$responsesArgs>): Prisma.PrismaPromise<Array<TicketsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tickets base type for findUnique actions
   */
  export type TicketsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findUnique
   */
  export interface TicketsFindUniqueArgs extends TicketsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tickets findUniqueOrThrow
   */
  export type TicketsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }


  /**
   * Tickets base type for findFirst actions
   */
  export type TicketsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: Enumerable<TicketsScalarFieldEnum>
  }

  /**
   * Tickets findFirst
   */
  export interface TicketsFindFirstArgs extends TicketsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tickets findFirstOrThrow
   */
  export type TicketsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: Enumerable<TicketsScalarFieldEnum>
  }


  /**
   * Tickets findMany
   */
  export type TicketsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: Enumerable<TicketsScalarFieldEnum>
  }


  /**
   * Tickets create
   */
  export type TicketsCreateArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * The data needed to create a Tickets.
     */
    data: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
  }


  /**
   * Tickets update
   */
  export type TicketsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * The data needed to update a Tickets.
     */
    data: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
    /**
     * Choose, which Tickets to update.
     */
    where: TicketsWhereUniqueInput
  }


  /**
   * Tickets updateMany
   */
  export type TicketsUpdateManyArgs = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketsWhereInput
  }


  /**
   * Tickets upsert
   */
  export type TicketsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * The filter to search for the Tickets to update in case it exists.
     */
    where: TicketsWhereUniqueInput
    /**
     * In case the Tickets found by the `where` argument doesn't exist, create a new Tickets with this data.
     */
    create: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
    /**
     * In case the Tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
  }


  /**
   * Tickets delete
   */
  export type TicketsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    /**
     * Filter which Tickets to delete.
     */
    where: TicketsWhereUniqueInput
  }


  /**
   * Tickets deleteMany
   */
  export type TicketsDeleteManyArgs = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketsWhereInput
  }


  /**
   * Tickets.responses
   */
  export type Tickets$responsesArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
    where?: TicketsWhereInput
    orderBy?: Enumerable<TicketsOrderByWithRelationInput>
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TicketsScalarFieldEnum>
  }


  /**
   * Tickets without action
   */
  export type TicketsArgs = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketsInclude | null
  }



  /**
   * Model Site
   */


  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    ballance: number | null
  }

  export type SiteSumAggregateOutputType = {
    ballance: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: string | null
    ballance: number | null
    data: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMaxAggregateOutputType = {
    id: string | null
    ballance: number | null
    data: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    ballance: number
    data: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    ballance?: true
  }

  export type SiteSumAggregateInputType = {
    ballance?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    ballance?: true
    data?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    ballance?: true
    data?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    ballance?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteAggregateArgs = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs = {
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithAggregationInput>
    by: SiteScalarFieldEnum[]
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }


  export type SiteGroupByOutputType = {
    id: string
    ballance: number
    data: string
    createdAt: Date
    updatedAt: Date
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect = {
    id?: boolean
    ballance?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type SiteGetPayload<S extends boolean | null | undefined | SiteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Site :
    S extends undefined ? never :
    S extends { include: any } & (SiteArgs | SiteFindManyArgs)
    ? Site 
    : S extends { select: any } & (SiteArgs | SiteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Site ? Site[P] : never
  } 
      : Site


  type SiteCountArgs = 
    Omit<SiteFindManyArgs, 'select' | 'include'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find one Site that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SiteFindUniqueOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find the first Site that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SiteFindFirstOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteFindManyArgs>(
      args?: SelectSubset<T, SiteFindManyArgs>
    ): Prisma.PrismaPromise<Array<SiteGetPayload<T>>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
    **/
    create<T extends SiteCreateArgs>(
      args: SelectSubset<T, SiteCreateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
    **/
    delete<T extends SiteDeleteArgs>(
      args: SelectSubset<T, SiteDeleteArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteUpdateArgs>(
      args: SelectSubset<T, SiteUpdateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteDeleteManyArgs>(
      args?: SelectSubset<T, SiteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteUpdateManyArgs>(
      args: SelectSubset<T, SiteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
    **/
    upsert<T extends SiteUpsertArgs>(
      args: SelectSubset<T, SiteUpsertArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Site base type for findUnique actions
   */
  export type SiteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUnique
   */
  export interface SiteFindUniqueArgs extends SiteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site base type for findFirst actions
   */
  export type SiteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }

  /**
   * Site findFirst
   */
  export interface SiteFindFirstArgs extends SiteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site findMany
   */
  export type SiteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site create
   */
  export type SiteCreateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }


  /**
   * Site update
   */
  export type SiteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }


  /**
   * Site upsert
   */
  export type SiteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }


  /**
   * Site delete
   */
  export type SiteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }


  /**
   * Site without action
   */
  export type SiteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
  }



  /**
   * Model Statistics
   */


  export type AggregateStatistics = {
    _count: StatisticsCountAggregateOutputType | null
    _min: StatisticsMinAggregateOutputType | null
    _max: StatisticsMaxAggregateOutputType | null
  }

  export type StatisticsMinAggregateOutputType = {
    id: string | null
    databaseId: string | null
    data: string | null
  }

  export type StatisticsMaxAggregateOutputType = {
    id: string | null
    databaseId: string | null
    data: string | null
  }

  export type StatisticsCountAggregateOutputType = {
    id: number
    databaseId: number
    data: number
    _all: number
  }


  export type StatisticsMinAggregateInputType = {
    id?: true
    databaseId?: true
    data?: true
  }

  export type StatisticsMaxAggregateInputType = {
    id?: true
    databaseId?: true
    data?: true
  }

  export type StatisticsCountAggregateInputType = {
    id?: true
    databaseId?: true
    data?: true
    _all?: true
  }

  export type StatisticsAggregateArgs = {
    /**
     * Filter which Statistics to aggregate.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: Enumerable<StatisticsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statistics
    **/
    _count?: true | StatisticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatisticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatisticsMaxAggregateInputType
  }

  export type GetStatisticsAggregateType<T extends StatisticsAggregateArgs> = {
        [P in keyof T & keyof AggregateStatistics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatistics[P]>
      : GetScalarType<T[P], AggregateStatistics[P]>
  }




  export type StatisticsGroupByArgs = {
    where?: StatisticsWhereInput
    orderBy?: Enumerable<StatisticsOrderByWithAggregationInput>
    by: StatisticsScalarFieldEnum[]
    having?: StatisticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatisticsCountAggregateInputType | true
    _min?: StatisticsMinAggregateInputType
    _max?: StatisticsMaxAggregateInputType
  }


  export type StatisticsGroupByOutputType = {
    id: string
    databaseId: string | null
    data: string
    _count: StatisticsCountAggregateOutputType | null
    _min: StatisticsMinAggregateOutputType | null
    _max: StatisticsMaxAggregateOutputType | null
  }

  type GetStatisticsGroupByPayload<T extends StatisticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StatisticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatisticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatisticsGroupByOutputType[P]>
            : GetScalarType<T[P], StatisticsGroupByOutputType[P]>
        }
      >
    >


  export type StatisticsSelect = {
    id?: boolean
    databaseId?: boolean
    data?: boolean
    Database?: boolean | DatabaseArgs
  }


  export type StatisticsInclude = {
    Database?: boolean | DatabaseArgs
  }

  export type StatisticsGetPayload<S extends boolean | null | undefined | StatisticsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Statistics :
    S extends undefined ? never :
    S extends { include: any } & (StatisticsArgs | StatisticsFindManyArgs)
    ? Statistics  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Database' ? DatabaseGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (StatisticsArgs | StatisticsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Database' ? DatabaseGetPayload<S['select'][P]> | null :  P extends keyof Statistics ? Statistics[P] : never
  } 
      : Statistics


  type StatisticsCountArgs = 
    Omit<StatisticsFindManyArgs, 'select' | 'include'> & {
      select?: StatisticsCountAggregateInputType | true
    }

  export interface StatisticsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Statistics that matches the filter.
     * @param {StatisticsFindUniqueArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatisticsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatisticsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Statistics'> extends True ? Prisma__StatisticsClient<StatisticsGetPayload<T>> : Prisma__StatisticsClient<StatisticsGetPayload<T> | null, null>

    /**
     * Find one Statistics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatisticsFindUniqueOrThrowArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatisticsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StatisticsFindUniqueOrThrowArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Find the first Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindFirstArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatisticsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatisticsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Statistics'> extends True ? Prisma__StatisticsClient<StatisticsGetPayload<T>> : Prisma__StatisticsClient<StatisticsGetPayload<T> | null, null>

    /**
     * Find the first Statistics that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindFirstOrThrowArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatisticsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StatisticsFindFirstOrThrowArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Find zero or more Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statistics
     * const statistics = await prisma.statistics.findMany()
     * 
     * // Get first 10 Statistics
     * const statistics = await prisma.statistics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statisticsWithIdOnly = await prisma.statistics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatisticsFindManyArgs>(
      args?: SelectSubset<T, StatisticsFindManyArgs>
    ): Prisma.PrismaPromise<Array<StatisticsGetPayload<T>>>

    /**
     * Create a Statistics.
     * @param {StatisticsCreateArgs} args - Arguments to create a Statistics.
     * @example
     * // Create one Statistics
     * const Statistics = await prisma.statistics.create({
     *   data: {
     *     // ... data to create a Statistics
     *   }
     * })
     * 
    **/
    create<T extends StatisticsCreateArgs>(
      args: SelectSubset<T, StatisticsCreateArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Delete a Statistics.
     * @param {StatisticsDeleteArgs} args - Arguments to delete one Statistics.
     * @example
     * // Delete one Statistics
     * const Statistics = await prisma.statistics.delete({
     *   where: {
     *     // ... filter to delete one Statistics
     *   }
     * })
     * 
    **/
    delete<T extends StatisticsDeleteArgs>(
      args: SelectSubset<T, StatisticsDeleteArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Update one Statistics.
     * @param {StatisticsUpdateArgs} args - Arguments to update one Statistics.
     * @example
     * // Update one Statistics
     * const statistics = await prisma.statistics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatisticsUpdateArgs>(
      args: SelectSubset<T, StatisticsUpdateArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Delete zero or more Statistics.
     * @param {StatisticsDeleteManyArgs} args - Arguments to filter Statistics to delete.
     * @example
     * // Delete a few Statistics
     * const { count } = await prisma.statistics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatisticsDeleteManyArgs>(
      args?: SelectSubset<T, StatisticsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statistics
     * const statistics = await prisma.statistics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatisticsUpdateManyArgs>(
      args: SelectSubset<T, StatisticsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statistics.
     * @param {StatisticsUpsertArgs} args - Arguments to update or create a Statistics.
     * @example
     * // Update or create a Statistics
     * const statistics = await prisma.statistics.upsert({
     *   create: {
     *     // ... data to create a Statistics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statistics we want to update
     *   }
     * })
    **/
    upsert<T extends StatisticsUpsertArgs>(
      args: SelectSubset<T, StatisticsUpsertArgs>
    ): Prisma__StatisticsClient<StatisticsGetPayload<T>>

    /**
     * Count the number of Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsCountArgs} args - Arguments to filter Statistics to count.
     * @example
     * // Count the number of Statistics
     * const count = await prisma.statistics.count({
     *   where: {
     *     // ... the filter for the Statistics we want to count
     *   }
     * })
    **/
    count<T extends StatisticsCountArgs>(
      args?: Subset<T, StatisticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatisticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatisticsAggregateArgs>(args: Subset<T, StatisticsAggregateArgs>): Prisma.PrismaPromise<GetStatisticsAggregateType<T>>

    /**
     * Group by Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatisticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatisticsGroupByArgs['orderBy'] }
        : { orderBy?: StatisticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatisticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Statistics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatisticsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Database<T extends DatabaseArgs= {}>(args?: Subset<T, DatabaseArgs>): Prisma__DatabaseClient<DatabaseGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Statistics base type for findUnique actions
   */
  export type StatisticsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter, which Statistics to fetch.
     */
    where: StatisticsWhereUniqueInput
  }

  /**
   * Statistics findUnique
   */
  export interface StatisticsFindUniqueArgs extends StatisticsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Statistics findUniqueOrThrow
   */
  export type StatisticsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter, which Statistics to fetch.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics base type for findFirst actions
   */
  export type StatisticsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: Enumerable<StatisticsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: Enumerable<StatisticsScalarFieldEnum>
  }

  /**
   * Statistics findFirst
   */
  export interface StatisticsFindFirstArgs extends StatisticsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Statistics findFirstOrThrow
   */
  export type StatisticsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: Enumerable<StatisticsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: Enumerable<StatisticsScalarFieldEnum>
  }


  /**
   * Statistics findMany
   */
  export type StatisticsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: Enumerable<StatisticsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    distinct?: Enumerable<StatisticsScalarFieldEnum>
  }


  /**
   * Statistics create
   */
  export type StatisticsCreateArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * The data needed to create a Statistics.
     */
    data: XOR<StatisticsCreateInput, StatisticsUncheckedCreateInput>
  }


  /**
   * Statistics update
   */
  export type StatisticsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * The data needed to update a Statistics.
     */
    data: XOR<StatisticsUpdateInput, StatisticsUncheckedUpdateInput>
    /**
     * Choose, which Statistics to update.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics updateMany
   */
  export type StatisticsUpdateManyArgs = {
    /**
     * The data used to update Statistics.
     */
    data: XOR<StatisticsUpdateManyMutationInput, StatisticsUncheckedUpdateManyInput>
    /**
     * Filter which Statistics to update
     */
    where?: StatisticsWhereInput
  }


  /**
   * Statistics upsert
   */
  export type StatisticsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * The filter to search for the Statistics to update in case it exists.
     */
    where: StatisticsWhereUniqueInput
    /**
     * In case the Statistics found by the `where` argument doesn't exist, create a new Statistics with this data.
     */
    create: XOR<StatisticsCreateInput, StatisticsUncheckedCreateInput>
    /**
     * In case the Statistics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatisticsUpdateInput, StatisticsUncheckedUpdateInput>
  }


  /**
   * Statistics delete
   */
  export type StatisticsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
    /**
     * Filter which Statistics to delete.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics deleteMany
   */
  export type StatisticsDeleteManyArgs = {
    /**
     * Filter which Statistics to delete
     */
    where?: StatisticsWhereInput
  }


  /**
   * Statistics without action
   */
  export type StatisticsArgs = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatisticsInclude | null
  }



  /**
   * Model BTC_Addresses
   */


  export type AggregateBTC_Addresses = {
    _count: BTC_AddressesCountAggregateOutputType | null
    _avg: BTC_AddressesAvgAggregateOutputType | null
    _sum: BTC_AddressesSumAggregateOutputType | null
    _min: BTC_AddressesMinAggregateOutputType | null
    _max: BTC_AddressesMaxAggregateOutputType | null
  }

  export type BTC_AddressesAvgAggregateOutputType = {
    received_btc: number | null
    received_usd: number | null
    currentBtcPrice: number | null
  }

  export type BTC_AddressesSumAggregateOutputType = {
    received_btc: number | null
    received_usd: number | null
    currentBtcPrice: number | null
  }

  export type BTC_AddressesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    status: string | null
    received_btc: number | null
    received_usd: number | null
    currentBtcPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BTC_AddressesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    status: string | null
    received_btc: number | null
    received_usd: number | null
    currentBtcPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BTC_AddressesCountAggregateOutputType = {
    id: number
    userId: number
    address: number
    status: number
    received_btc: number
    received_usd: number
    currentBtcPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BTC_AddressesAvgAggregateInputType = {
    received_btc?: true
    received_usd?: true
    currentBtcPrice?: true
  }

  export type BTC_AddressesSumAggregateInputType = {
    received_btc?: true
    received_usd?: true
    currentBtcPrice?: true
  }

  export type BTC_AddressesMinAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    status?: true
    received_btc?: true
    received_usd?: true
    currentBtcPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BTC_AddressesMaxAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    status?: true
    received_btc?: true
    received_usd?: true
    currentBtcPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BTC_AddressesCountAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    status?: true
    received_btc?: true
    received_usd?: true
    currentBtcPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BTC_AddressesAggregateArgs = {
    /**
     * Filter which BTC_Addresses to aggregate.
     */
    where?: BTC_AddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTC_Addresses to fetch.
     */
    orderBy?: Enumerable<BTC_AddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BTC_AddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTC_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTC_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BTC_Addresses
    **/
    _count?: true | BTC_AddressesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BTC_AddressesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BTC_AddressesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BTC_AddressesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BTC_AddressesMaxAggregateInputType
  }

  export type GetBTC_AddressesAggregateType<T extends BTC_AddressesAggregateArgs> = {
        [P in keyof T & keyof AggregateBTC_Addresses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBTC_Addresses[P]>
      : GetScalarType<T[P], AggregateBTC_Addresses[P]>
  }




  export type BTC_AddressesGroupByArgs = {
    where?: BTC_AddressesWhereInput
    orderBy?: Enumerable<BTC_AddressesOrderByWithAggregationInput>
    by: BTC_AddressesScalarFieldEnum[]
    having?: BTC_AddressesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BTC_AddressesCountAggregateInputType | true
    _avg?: BTC_AddressesAvgAggregateInputType
    _sum?: BTC_AddressesSumAggregateInputType
    _min?: BTC_AddressesMinAggregateInputType
    _max?: BTC_AddressesMaxAggregateInputType
  }


  export type BTC_AddressesGroupByOutputType = {
    id: string
    userId: string
    address: string
    status: string
    received_btc: number
    received_usd: number
    currentBtcPrice: number
    createdAt: Date
    updatedAt: Date
    _count: BTC_AddressesCountAggregateOutputType | null
    _avg: BTC_AddressesAvgAggregateOutputType | null
    _sum: BTC_AddressesSumAggregateOutputType | null
    _min: BTC_AddressesMinAggregateOutputType | null
    _max: BTC_AddressesMaxAggregateOutputType | null
  }

  type GetBTC_AddressesGroupByPayload<T extends BTC_AddressesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BTC_AddressesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BTC_AddressesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BTC_AddressesGroupByOutputType[P]>
            : GetScalarType<T[P], BTC_AddressesGroupByOutputType[P]>
        }
      >
    >


  export type BTC_AddressesSelect = {
    id?: boolean
    userId?: boolean
    address?: boolean
    status?: boolean
    received_btc?: boolean
    received_usd?: boolean
    currentBtcPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }


  export type BTC_AddressesInclude = {
    user?: boolean | UserArgs
  }

  export type BTC_AddressesGetPayload<S extends boolean | null | undefined | BTC_AddressesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BTC_Addresses :
    S extends undefined ? never :
    S extends { include: any } & (BTC_AddressesArgs | BTC_AddressesFindManyArgs)
    ? BTC_Addresses  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BTC_AddressesArgs | BTC_AddressesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof BTC_Addresses ? BTC_Addresses[P] : never
  } 
      : BTC_Addresses


  type BTC_AddressesCountArgs = 
    Omit<BTC_AddressesFindManyArgs, 'select' | 'include'> & {
      select?: BTC_AddressesCountAggregateInputType | true
    }

  export interface BTC_AddressesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BTC_Addresses that matches the filter.
     * @param {BTC_AddressesFindUniqueArgs} args - Arguments to find a BTC_Addresses
     * @example
     * // Get one BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BTC_AddressesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BTC_AddressesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BTC_Addresses'> extends True ? Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>> : Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T> | null, null>

    /**
     * Find one BTC_Addresses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BTC_AddressesFindUniqueOrThrowArgs} args - Arguments to find a BTC_Addresses
     * @example
     * // Get one BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BTC_AddressesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BTC_AddressesFindUniqueOrThrowArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Find the first BTC_Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesFindFirstArgs} args - Arguments to find a BTC_Addresses
     * @example
     * // Get one BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BTC_AddressesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BTC_AddressesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BTC_Addresses'> extends True ? Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>> : Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T> | null, null>

    /**
     * Find the first BTC_Addresses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesFindFirstOrThrowArgs} args - Arguments to find a BTC_Addresses
     * @example
     * // Get one BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BTC_AddressesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BTC_AddressesFindFirstOrThrowArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Find zero or more BTC_Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findMany()
     * 
     * // Get first 10 BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bTC_AddressesWithIdOnly = await prisma.bTC_Addresses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BTC_AddressesFindManyArgs>(
      args?: SelectSubset<T, BTC_AddressesFindManyArgs>
    ): Prisma.PrismaPromise<Array<BTC_AddressesGetPayload<T>>>

    /**
     * Create a BTC_Addresses.
     * @param {BTC_AddressesCreateArgs} args - Arguments to create a BTC_Addresses.
     * @example
     * // Create one BTC_Addresses
     * const BTC_Addresses = await prisma.bTC_Addresses.create({
     *   data: {
     *     // ... data to create a BTC_Addresses
     *   }
     * })
     * 
    **/
    create<T extends BTC_AddressesCreateArgs>(
      args: SelectSubset<T, BTC_AddressesCreateArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Delete a BTC_Addresses.
     * @param {BTC_AddressesDeleteArgs} args - Arguments to delete one BTC_Addresses.
     * @example
     * // Delete one BTC_Addresses
     * const BTC_Addresses = await prisma.bTC_Addresses.delete({
     *   where: {
     *     // ... filter to delete one BTC_Addresses
     *   }
     * })
     * 
    **/
    delete<T extends BTC_AddressesDeleteArgs>(
      args: SelectSubset<T, BTC_AddressesDeleteArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Update one BTC_Addresses.
     * @param {BTC_AddressesUpdateArgs} args - Arguments to update one BTC_Addresses.
     * @example
     * // Update one BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BTC_AddressesUpdateArgs>(
      args: SelectSubset<T, BTC_AddressesUpdateArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Delete zero or more BTC_Addresses.
     * @param {BTC_AddressesDeleteManyArgs} args - Arguments to filter BTC_Addresses to delete.
     * @example
     * // Delete a few BTC_Addresses
     * const { count } = await prisma.bTC_Addresses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BTC_AddressesDeleteManyArgs>(
      args?: SelectSubset<T, BTC_AddressesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BTC_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BTC_AddressesUpdateManyArgs>(
      args: SelectSubset<T, BTC_AddressesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BTC_Addresses.
     * @param {BTC_AddressesUpsertArgs} args - Arguments to update or create a BTC_Addresses.
     * @example
     * // Update or create a BTC_Addresses
     * const bTC_Addresses = await prisma.bTC_Addresses.upsert({
     *   create: {
     *     // ... data to create a BTC_Addresses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BTC_Addresses we want to update
     *   }
     * })
    **/
    upsert<T extends BTC_AddressesUpsertArgs>(
      args: SelectSubset<T, BTC_AddressesUpsertArgs>
    ): Prisma__BTC_AddressesClient<BTC_AddressesGetPayload<T>>

    /**
     * Count the number of BTC_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesCountArgs} args - Arguments to filter BTC_Addresses to count.
     * @example
     * // Count the number of BTC_Addresses
     * const count = await prisma.bTC_Addresses.count({
     *   where: {
     *     // ... the filter for the BTC_Addresses we want to count
     *   }
     * })
    **/
    count<T extends BTC_AddressesCountArgs>(
      args?: Subset<T, BTC_AddressesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BTC_AddressesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BTC_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BTC_AddressesAggregateArgs>(args: Subset<T, BTC_AddressesAggregateArgs>): Prisma.PrismaPromise<GetBTC_AddressesAggregateType<T>>

    /**
     * Group by BTC_Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BTC_AddressesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BTC_AddressesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BTC_AddressesGroupByArgs['orderBy'] }
        : { orderBy?: BTC_AddressesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BTC_AddressesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBTC_AddressesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BTC_Addresses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BTC_AddressesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BTC_Addresses base type for findUnique actions
   */
  export type BTC_AddressesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter, which BTC_Addresses to fetch.
     */
    where: BTC_AddressesWhereUniqueInput
  }

  /**
   * BTC_Addresses findUnique
   */
  export interface BTC_AddressesFindUniqueArgs extends BTC_AddressesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BTC_Addresses findUniqueOrThrow
   */
  export type BTC_AddressesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter, which BTC_Addresses to fetch.
     */
    where: BTC_AddressesWhereUniqueInput
  }


  /**
   * BTC_Addresses base type for findFirst actions
   */
  export type BTC_AddressesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter, which BTC_Addresses to fetch.
     */
    where?: BTC_AddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTC_Addresses to fetch.
     */
    orderBy?: Enumerable<BTC_AddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTC_Addresses.
     */
    cursor?: BTC_AddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTC_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTC_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTC_Addresses.
     */
    distinct?: Enumerable<BTC_AddressesScalarFieldEnum>
  }

  /**
   * BTC_Addresses findFirst
   */
  export interface BTC_AddressesFindFirstArgs extends BTC_AddressesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BTC_Addresses findFirstOrThrow
   */
  export type BTC_AddressesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter, which BTC_Addresses to fetch.
     */
    where?: BTC_AddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTC_Addresses to fetch.
     */
    orderBy?: Enumerable<BTC_AddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BTC_Addresses.
     */
    cursor?: BTC_AddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTC_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTC_Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BTC_Addresses.
     */
    distinct?: Enumerable<BTC_AddressesScalarFieldEnum>
  }


  /**
   * BTC_Addresses findMany
   */
  export type BTC_AddressesFindManyArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter, which BTC_Addresses to fetch.
     */
    where?: BTC_AddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BTC_Addresses to fetch.
     */
    orderBy?: Enumerable<BTC_AddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BTC_Addresses.
     */
    cursor?: BTC_AddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BTC_Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BTC_Addresses.
     */
    skip?: number
    distinct?: Enumerable<BTC_AddressesScalarFieldEnum>
  }


  /**
   * BTC_Addresses create
   */
  export type BTC_AddressesCreateArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * The data needed to create a BTC_Addresses.
     */
    data: XOR<BTC_AddressesCreateInput, BTC_AddressesUncheckedCreateInput>
  }


  /**
   * BTC_Addresses update
   */
  export type BTC_AddressesUpdateArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * The data needed to update a BTC_Addresses.
     */
    data: XOR<BTC_AddressesUpdateInput, BTC_AddressesUncheckedUpdateInput>
    /**
     * Choose, which BTC_Addresses to update.
     */
    where: BTC_AddressesWhereUniqueInput
  }


  /**
   * BTC_Addresses updateMany
   */
  export type BTC_AddressesUpdateManyArgs = {
    /**
     * The data used to update BTC_Addresses.
     */
    data: XOR<BTC_AddressesUpdateManyMutationInput, BTC_AddressesUncheckedUpdateManyInput>
    /**
     * Filter which BTC_Addresses to update
     */
    where?: BTC_AddressesWhereInput
  }


  /**
   * BTC_Addresses upsert
   */
  export type BTC_AddressesUpsertArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * The filter to search for the BTC_Addresses to update in case it exists.
     */
    where: BTC_AddressesWhereUniqueInput
    /**
     * In case the BTC_Addresses found by the `where` argument doesn't exist, create a new BTC_Addresses with this data.
     */
    create: XOR<BTC_AddressesCreateInput, BTC_AddressesUncheckedCreateInput>
    /**
     * In case the BTC_Addresses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BTC_AddressesUpdateInput, BTC_AddressesUncheckedUpdateInput>
  }


  /**
   * BTC_Addresses delete
   */
  export type BTC_AddressesDeleteArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
    /**
     * Filter which BTC_Addresses to delete.
     */
    where: BTC_AddressesWhereUniqueInput
  }


  /**
   * BTC_Addresses deleteMany
   */
  export type BTC_AddressesDeleteManyArgs = {
    /**
     * Filter which BTC_Addresses to delete
     */
    where?: BTC_AddressesWhereInput
  }


  /**
   * BTC_Addresses without action
   */
  export type BTC_AddressesArgs = {
    /**
     * Select specific fields to fetch from the BTC_Addresses
     */
    select?: BTC_AddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BTC_AddressesInclude | null
  }



  /**
   * Model News
   */


  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsMinAggregateOutputType = {
    id: string | null
    title: string | null
    priority: string | null
    description: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    priority: string | null
    description: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    priority: number
    description: number
    authorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    priority?: true
    description?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    priority?: true
    description?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    priority?: true
    description?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NewsAggregateArgs = {
    /**
     * Filter which News to aggregate.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs = {
    where?: NewsWhereInput
    orderBy?: Enumerable<NewsOrderByWithAggregationInput>
    by: NewsScalarFieldEnum[]
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }


  export type NewsGroupByOutputType = {
    id: string
    title: string
    priority: string
    description: string
    authorId: string
    createdAt: Date
    updatedAt: Date
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect = {
    id?: boolean
    title?: boolean
    priority?: boolean
    description?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserArgs
  }


  export type NewsInclude = {
    author?: boolean | UserArgs
  }

  export type NewsGetPayload<S extends boolean | null | undefined | NewsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? News :
    S extends undefined ? never :
    S extends { include: any } & (NewsArgs | NewsFindManyArgs)
    ? News  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NewsArgs | NewsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> :  P extends keyof News ? News[P] : never
  } 
      : News


  type NewsCountArgs = 
    Omit<NewsFindManyArgs, 'select' | 'include'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface NewsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'News'> extends True ? Prisma__NewsClient<NewsGetPayload<T>> : Prisma__NewsClient<NewsGetPayload<T> | null, null>

    /**
     * Find one News that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NewsFindUniqueOrThrowArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'News'> extends True ? Prisma__NewsClient<NewsGetPayload<T>> : Prisma__NewsClient<NewsGetPayload<T> | null, null>

    /**
     * Find the first News that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NewsFindFirstOrThrowArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsFindManyArgs>(
      args?: SelectSubset<T, NewsFindManyArgs>
    ): Prisma.PrismaPromise<Array<NewsGetPayload<T>>>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
    **/
    create<T extends NewsCreateArgs>(
      args: SelectSubset<T, NewsCreateArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
    **/
    delete<T extends NewsDeleteArgs>(
      args: SelectSubset<T, NewsDeleteArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsUpdateArgs>(
      args: SelectSubset<T, NewsUpdateArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsDeleteManyArgs>(
      args?: SelectSubset<T, NewsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsUpdateManyArgs>(
      args: SelectSubset<T, NewsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
    **/
    upsert<T extends NewsUpsertArgs>(
      args: SelectSubset<T, NewsUpsertArgs>
    ): Prisma__NewsClient<NewsGetPayload<T>>

    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * News base type for findUnique actions
   */
  export type NewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findUnique
   */
  export interface NewsFindUniqueArgs extends NewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News base type for findFirst actions
   */
  export type NewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }

  /**
   * News findFirst
   */
  export interface NewsFindFirstArgs extends NewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News findMany
   */
  export type NewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News create
   */
  export type NewsCreateArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * The data needed to create a News.
     */
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }


  /**
   * News update
   */
  export type NewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * The data needed to update a News.
     */
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs = {
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }


  /**
   * News upsert
   */
  export type NewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * The filter to search for the News to update in case it exists.
     */
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     */
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }


  /**
   * News delete
   */
  export type NewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
    /**
     * Filter which News to delete.
     */
    where: NewsWhereUniqueInput
  }


  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs = {
    /**
     * Filter which News to delete
     */
    where?: NewsWhereInput
  }


  /**
   * News without action
   */
  export type NewsArgs = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewsInclude | null
  }



  /**
   * Model Actions
   */


  export type AggregateActions = {
    _count: ActionsCountAggregateOutputType | null
    _min: ActionsMinAggregateOutputType | null
    _max: ActionsMaxAggregateOutputType | null
  }

  export type ActionsMinAggregateOutputType = {
    id: string | null
    type: string | null
    data: string | null
    userId: string | null
    created_at: Date | null
  }

  export type ActionsMaxAggregateOutputType = {
    id: string | null
    type: string | null
    data: string | null
    userId: string | null
    created_at: Date | null
  }

  export type ActionsCountAggregateOutputType = {
    id: number
    type: number
    data: number
    userId: number
    created_at: number
    _all: number
  }


  export type ActionsMinAggregateInputType = {
    id?: true
    type?: true
    data?: true
    userId?: true
    created_at?: true
  }

  export type ActionsMaxAggregateInputType = {
    id?: true
    type?: true
    data?: true
    userId?: true
    created_at?: true
  }

  export type ActionsCountAggregateInputType = {
    id?: true
    type?: true
    data?: true
    userId?: true
    created_at?: true
    _all?: true
  }

  export type ActionsAggregateArgs = {
    /**
     * Filter which Actions to aggregate.
     */
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actions
    **/
    _count?: true | ActionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionsMaxAggregateInputType
  }

  export type GetActionsAggregateType<T extends ActionsAggregateArgs> = {
        [P in keyof T & keyof AggregateActions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActions[P]>
      : GetScalarType<T[P], AggregateActions[P]>
  }




  export type ActionsGroupByArgs = {
    where?: ActionsWhereInput
    orderBy?: Enumerable<ActionsOrderByWithAggregationInput>
    by: ActionsScalarFieldEnum[]
    having?: ActionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionsCountAggregateInputType | true
    _min?: ActionsMinAggregateInputType
    _max?: ActionsMaxAggregateInputType
  }


  export type ActionsGroupByOutputType = {
    id: string
    type: string
    data: string
    userId: string | null
    created_at: Date
    _count: ActionsCountAggregateOutputType | null
    _min: ActionsMinAggregateOutputType | null
    _max: ActionsMaxAggregateOutputType | null
  }

  type GetActionsGroupByPayload<T extends ActionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ActionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionsGroupByOutputType[P]>
            : GetScalarType<T[P], ActionsGroupByOutputType[P]>
        }
      >
    >


  export type ActionsSelect = {
    id?: boolean
    type?: boolean
    data?: boolean
    userId?: boolean
    created_at?: boolean
    user?: boolean | UserArgs
  }


  export type ActionsInclude = {
    user?: boolean | UserArgs
  }

  export type ActionsGetPayload<S extends boolean | null | undefined | ActionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Actions :
    S extends undefined ? never :
    S extends { include: any } & (ActionsArgs | ActionsFindManyArgs)
    ? Actions  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ActionsArgs | ActionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Actions ? Actions[P] : never
  } 
      : Actions


  type ActionsCountArgs = 
    Omit<ActionsFindManyArgs, 'select' | 'include'> & {
      select?: ActionsCountAggregateInputType | true
    }

  export interface ActionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Actions that matches the filter.
     * @param {ActionsFindUniqueArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Actions'> extends True ? Prisma__ActionsClient<ActionsGetPayload<T>> : Prisma__ActionsClient<ActionsGetPayload<T> | null, null>

    /**
     * Find one Actions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActionsFindUniqueOrThrowArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ActionsFindUniqueOrThrowArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Find the first Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindFirstArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Actions'> extends True ? Prisma__ActionsClient<ActionsGetPayload<T>> : Prisma__ActionsClient<ActionsGetPayload<T> | null, null>

    /**
     * Find the first Actions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindFirstOrThrowArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActionsFindFirstOrThrowArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Find zero or more Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actions
     * const actions = await prisma.actions.findMany()
     * 
     * // Get first 10 Actions
     * const actions = await prisma.actions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionsWithIdOnly = await prisma.actions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActionsFindManyArgs>(
      args?: SelectSubset<T, ActionsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ActionsGetPayload<T>>>

    /**
     * Create a Actions.
     * @param {ActionsCreateArgs} args - Arguments to create a Actions.
     * @example
     * // Create one Actions
     * const Actions = await prisma.actions.create({
     *   data: {
     *     // ... data to create a Actions
     *   }
     * })
     * 
    **/
    create<T extends ActionsCreateArgs>(
      args: SelectSubset<T, ActionsCreateArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Delete a Actions.
     * @param {ActionsDeleteArgs} args - Arguments to delete one Actions.
     * @example
     * // Delete one Actions
     * const Actions = await prisma.actions.delete({
     *   where: {
     *     // ... filter to delete one Actions
     *   }
     * })
     * 
    **/
    delete<T extends ActionsDeleteArgs>(
      args: SelectSubset<T, ActionsDeleteArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Update one Actions.
     * @param {ActionsUpdateArgs} args - Arguments to update one Actions.
     * @example
     * // Update one Actions
     * const actions = await prisma.actions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActionsUpdateArgs>(
      args: SelectSubset<T, ActionsUpdateArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Delete zero or more Actions.
     * @param {ActionsDeleteManyArgs} args - Arguments to filter Actions to delete.
     * @example
     * // Delete a few Actions
     * const { count } = await prisma.actions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActionsDeleteManyArgs>(
      args?: SelectSubset<T, ActionsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actions
     * const actions = await prisma.actions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActionsUpdateManyArgs>(
      args: SelectSubset<T, ActionsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Actions.
     * @param {ActionsUpsertArgs} args - Arguments to update or create a Actions.
     * @example
     * // Update or create a Actions
     * const actions = await prisma.actions.upsert({
     *   create: {
     *     // ... data to create a Actions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actions we want to update
     *   }
     * })
    **/
    upsert<T extends ActionsUpsertArgs>(
      args: SelectSubset<T, ActionsUpsertArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Count the number of Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsCountArgs} args - Arguments to filter Actions to count.
     * @example
     * // Count the number of Actions
     * const count = await prisma.actions.count({
     *   where: {
     *     // ... the filter for the Actions we want to count
     *   }
     * })
    **/
    count<T extends ActionsCountArgs>(
      args?: Subset<T, ActionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionsAggregateArgs>(args: Subset<T, ActionsAggregateArgs>): Prisma.PrismaPromise<GetActionsAggregateType<T>>

    /**
     * Group by Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionsGroupByArgs['orderBy'] }
        : { orderBy?: ActionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Actions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActionsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Actions base type for findUnique actions
   */
  export type ActionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     */
    where: ActionsWhereUniqueInput
  }

  /**
   * Actions findUnique
   */
  export interface ActionsFindUniqueArgs extends ActionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actions findUniqueOrThrow
   */
  export type ActionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     */
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions base type for findFirst actions
   */
  export type ActionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     */
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     */
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     */
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }

  /**
   * Actions findFirst
   */
  export interface ActionsFindFirstArgs extends ActionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actions findFirstOrThrow
   */
  export type ActionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     */
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     */
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     */
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }


  /**
   * Actions findMany
   */
  export type ActionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     */
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actions.
     */
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }


  /**
   * Actions create
   */
  export type ActionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * The data needed to create a Actions.
     */
    data: XOR<ActionsCreateInput, ActionsUncheckedCreateInput>
  }


  /**
   * Actions update
   */
  export type ActionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * The data needed to update a Actions.
     */
    data: XOR<ActionsUpdateInput, ActionsUncheckedUpdateInput>
    /**
     * Choose, which Actions to update.
     */
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions updateMany
   */
  export type ActionsUpdateManyArgs = {
    /**
     * The data used to update Actions.
     */
    data: XOR<ActionsUpdateManyMutationInput, ActionsUncheckedUpdateManyInput>
    /**
     * Filter which Actions to update
     */
    where?: ActionsWhereInput
  }


  /**
   * Actions upsert
   */
  export type ActionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * The filter to search for the Actions to update in case it exists.
     */
    where: ActionsWhereUniqueInput
    /**
     * In case the Actions found by the `where` argument doesn't exist, create a new Actions with this data.
     */
    create: XOR<ActionsCreateInput, ActionsUncheckedCreateInput>
    /**
     * In case the Actions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionsUpdateInput, ActionsUncheckedUpdateInput>
  }


  /**
   * Actions delete
   */
  export type ActionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
    /**
     * Filter which Actions to delete.
     */
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions deleteMany
   */
  export type ActionsDeleteManyArgs = {
    /**
     * Filter which Actions to delete
     */
    where?: ActionsWhereInput
  }


  /**
   * Actions without action
   */
  export type ActionsArgs = {
    /**
     * Select specific fields to fetch from the Actions
     */
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActionsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActionsScalarFieldEnum: {
    id: 'id',
    type: 'type',
    data: 'data',
    userId: 'userId',
    created_at: 'created_at'
  };

  export type ActionsScalarFieldEnum = (typeof ActionsScalarFieldEnum)[keyof typeof ActionsScalarFieldEnum]


  export const BTC_AddressesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    address: 'address',
    status: 'status',
    received_btc: 'received_btc',
    received_usd: 'received_usd',
    currentBtcPrice: 'currentBtcPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BTC_AddressesScalarFieldEnum = (typeof BTC_AddressesScalarFieldEnum)[keyof typeof BTC_AddressesScalarFieldEnum]


  export const DatabaseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    statisticsId: 'statisticsId'
  };

  export type DatabaseScalarFieldEnum = (typeof DatabaseScalarFieldEnum)[keyof typeof DatabaseScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    code: 'code',
    total: 'total',
    status: 'status',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    priority: 'priority',
    description: 'description',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    sellerId: 'sellerId',
    buyerId: 'buyerId',
    status: 'status',
    price: 'price',
    old_price: 'old_price',
    cc_num: 'cc_num',
    cvv2: 'cvv2',
    skip: 'skip',
    full_name: 'full_name',
    first_name: 'first_name',
    last_name: 'last_name',
    sort_code: 'sort_code',
    misc: 'misc',
    exp_date: 'exp_date',
    exp_month: 'exp_month',
    exp_year: 'exp_year',
    zip: 'zip',
    address: 'address',
    address2: 'address2',
    city: 'city',
    country: 'country',
    ip: 'ip',
    type: 'type',
    state: 'state',
    phone: 'phone',
    dob: 'dob',
    ssn: 'ssn',
    email: 'email',
    password: 'password',
    mmn: 'mmn',
    vbv: 'vbv',
    acc_no: 'acc_no',
    driver_license: 'driver_license',
    dbVersion: 'dbVersion',
    canRefund: 'canRefund',
    refundExpire: 'refundExpire',
    wantRefund: 'wantRefund',
    userId: 'userId',
    databaseId: 'databaseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    id: 'id',
    current: 'current',
    userId: 'userId',
    expiresAt: 'expiresAt'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    importerPresets: 'importerPresets',
    theme: 'theme',
    canNotify: 'canNotify',
    canAlert: 'canAlert',
    alerts: 'alerts',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    ballance: 'ballance',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatisticsScalarFieldEnum: {
    id: 'id',
    databaseId: 'databaseId',
    data: 'data'
  };

  export type StatisticsScalarFieldEnum = (typeof StatisticsScalarFieldEnum)[keyof typeof StatisticsScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    category: 'category',
    message: 'message',
    status: 'status',
    reporterId: 'reporterId',
    ticketsId: 'ticketsId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    role: 'role',
    password: 'password',
    ballance: 'ballance',
    secure: 'secure',
    status: 'status',
    fee: 'fee',
    referenceId: 'referenceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    role?: StringFilter | string
    password?: StringFilter | string
    ballance?: FloatNullableFilter | number | null
    secure?: BoolNullableFilter | boolean | null
    status?: StringNullableFilter | string | null
    fee?: FloatNullableFilter | number | null
    referenceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    settings?: XOR<SettingsRelationFilter, SettingsWhereInput> | null
    Sessions?: SessionsListRelationFilter
    SellerProducts?: ProductsListRelationFilter
    BuyerProducts?: ProductsListRelationFilter
    Reference?: UserListRelationFilter
    reference?: XOR<UserRelationFilter, UserWhereInput> | null
    Products?: ProductsListRelationFilter
    Database?: DatabaseListRelationFilter
    invoices?: InvoiceListRelationFilter
    my_tickets?: TicketsListRelationFilter
    btc_addresses?: BTC_AddressesListRelationFilter
    news?: NewsListRelationFilter
    actions?: ActionsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    role?: SortOrder
    password?: SortOrder
    ballance?: SortOrder
    secure?: SortOrder
    status?: SortOrder
    fee?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SettingsOrderByWithRelationInput
    Sessions?: SessionsOrderByRelationAggregateInput
    SellerProducts?: ProductsOrderByRelationAggregateInput
    BuyerProducts?: ProductsOrderByRelationAggregateInput
    Reference?: UserOrderByRelationAggregateInput
    reference?: UserOrderByWithRelationInput
    Products?: ProductsOrderByRelationAggregateInput
    Database?: DatabaseOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    my_tickets?: TicketsOrderByRelationAggregateInput
    btc_addresses?: BTC_AddressesOrderByRelationAggregateInput
    news?: NewsOrderByRelationAggregateInput
    actions?: ActionsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    role?: SortOrder
    password?: SortOrder
    ballance?: SortOrder
    secure?: SortOrder
    status?: SortOrder
    fee?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    ballance?: FloatNullableWithAggregatesFilter | number | null
    secure?: BoolNullableWithAggregatesFilter | boolean | null
    status?: StringNullableWithAggregatesFilter | string | null
    fee?: FloatNullableWithAggregatesFilter | number | null
    referenceId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionsWhereInput = {
    AND?: Enumerable<SessionsWhereInput>
    OR?: Enumerable<SessionsWhereInput>
    NOT?: Enumerable<SessionsWhereInput>
    id?: StringFilter | string
    current?: StringFilter | string
    userId?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionsOrderByWithRelationInput = {
    id?: SortOrder
    current?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionsWhereUniqueInput = {
    id?: string
    current?: string
  }

  export type SessionsOrderByWithAggregationInput = {
    id?: SortOrder
    current?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    _count?: SessionsCountOrderByAggregateInput
    _max?: SessionsMaxOrderByAggregateInput
    _min?: SessionsMinOrderByAggregateInput
  }

  export type SessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    current?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expiresAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SettingsWhereInput = {
    AND?: Enumerable<SettingsWhereInput>
    OR?: Enumerable<SettingsWhereInput>
    NOT?: Enumerable<SettingsWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    importerPresets?: StringFilter | string
    theme?: StringFilter | string
    canNotify?: BoolFilter | boolean
    canAlert?: BoolFilter | boolean
    alerts?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    importerPresets?: SortOrder
    theme?: SortOrder
    canNotify?: SortOrder
    canAlert?: SortOrder
    alerts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SettingsWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type SettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    importerPresets?: SortOrder
    theme?: SortOrder
    canNotify?: SortOrder
    canAlert?: SortOrder
    alerts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SettingsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    importerPresets?: StringWithAggregatesFilter | string
    theme?: StringWithAggregatesFilter | string
    canNotify?: BoolWithAggregatesFilter | boolean
    canAlert?: BoolWithAggregatesFilter | boolean
    alerts?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DatabaseWhereInput = {
    AND?: Enumerable<DatabaseWhereInput>
    OR?: Enumerable<DatabaseWhereInput>
    NOT?: Enumerable<DatabaseWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    ownerId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    statisticsId?: StringNullableFilter | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
    products?: ProductsListRelationFilter
    statistics?: XOR<StatisticsRelationFilter, StatisticsWhereInput> | null
  }

  export type DatabaseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    statisticsId?: SortOrder
    owner?: UserOrderByWithRelationInput
    products?: ProductsOrderByRelationAggregateInput
    statistics?: StatisticsOrderByWithRelationInput
  }

  export type DatabaseWhereUniqueInput = {
    id?: string
    statisticsId?: string
  }

  export type DatabaseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    statisticsId?: SortOrder
    _count?: DatabaseCountOrderByAggregateInput
    _max?: DatabaseMaxOrderByAggregateInput
    _min?: DatabaseMinOrderByAggregateInput
  }

  export type DatabaseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DatabaseScalarWhereWithAggregatesInput>
    OR?: Enumerable<DatabaseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DatabaseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    ownerId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    statisticsId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProductsWhereInput = {
    AND?: Enumerable<ProductsWhereInput>
    OR?: Enumerable<ProductsWhereInput>
    NOT?: Enumerable<ProductsWhereInput>
    id?: StringFilter | string
    sellerId?: StringFilter | string
    buyerId?: StringNullableFilter | string | null
    status?: StringFilter | string
    price?: FloatFilter | number
    old_price?: FloatNullableFilter | number | null
    cc_num?: StringFilter | string
    cvv2?: StringFilter | string
    skip?: StringNullableFilter | string | null
    full_name?: StringNullableFilter | string | null
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    sort_code?: StringNullableFilter | string | null
    misc?: StringNullableFilter | string | null
    exp_date?: StringNullableFilter | string | null
    exp_month?: IntNullableFilter | number | null
    exp_year?: IntNullableFilter | number | null
    zip?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    address2?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    dob?: StringNullableFilter | string | null
    ssn?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    mmn?: StringNullableFilter | string | null
    vbv?: StringNullableFilter | string | null
    acc_no?: StringNullableFilter | string | null
    driver_license?: StringNullableFilter | string | null
    dbVersion?: IntFilter | number
    canRefund?: BoolFilter | boolean
    refundExpire?: DateTimeNullableFilter | Date | string | null
    wantRefund?: BoolFilter | boolean
    userId?: StringNullableFilter | string | null
    databaseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    seller?: XOR<UserRelationFilter, UserWhereInput>
    buyer?: XOR<UserRelationFilter, UserWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    database?: XOR<DatabaseRelationFilter, DatabaseWhereInput>
  }

  export type ProductsOrderByWithRelationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    buyerId?: SortOrder
    status?: SortOrder
    price?: SortOrder
    old_price?: SortOrder
    cc_num?: SortOrder
    cvv2?: SortOrder
    skip?: SortOrder
    full_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sort_code?: SortOrder
    misc?: SortOrder
    exp_date?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    country?: SortOrder
    ip?: SortOrder
    type?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    ssn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mmn?: SortOrder
    vbv?: SortOrder
    acc_no?: SortOrder
    driver_license?: SortOrder
    dbVersion?: SortOrder
    canRefund?: SortOrder
    refundExpire?: SortOrder
    wantRefund?: SortOrder
    userId?: SortOrder
    databaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seller?: UserOrderByWithRelationInput
    buyer?: UserOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    database?: DatabaseOrderByWithRelationInput
  }

  export type ProductsWhereUniqueInput = {
    id?: string
  }

  export type ProductsOrderByWithAggregationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    buyerId?: SortOrder
    status?: SortOrder
    price?: SortOrder
    old_price?: SortOrder
    cc_num?: SortOrder
    cvv2?: SortOrder
    skip?: SortOrder
    full_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sort_code?: SortOrder
    misc?: SortOrder
    exp_date?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    country?: SortOrder
    ip?: SortOrder
    type?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    ssn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mmn?: SortOrder
    vbv?: SortOrder
    acc_no?: SortOrder
    driver_license?: SortOrder
    dbVersion?: SortOrder
    canRefund?: SortOrder
    refundExpire?: SortOrder
    wantRefund?: SortOrder
    userId?: SortOrder
    databaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductsCountOrderByAggregateInput
    _avg?: ProductsAvgOrderByAggregateInput
    _max?: ProductsMaxOrderByAggregateInput
    _min?: ProductsMinOrderByAggregateInput
    _sum?: ProductsSumOrderByAggregateInput
  }

  export type ProductsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sellerId?: StringWithAggregatesFilter | string
    buyerId?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    old_price?: FloatNullableWithAggregatesFilter | number | null
    cc_num?: StringWithAggregatesFilter | string
    cvv2?: StringWithAggregatesFilter | string
    skip?: StringNullableWithAggregatesFilter | string | null
    full_name?: StringNullableWithAggregatesFilter | string | null
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    sort_code?: StringNullableWithAggregatesFilter | string | null
    misc?: StringNullableWithAggregatesFilter | string | null
    exp_date?: StringNullableWithAggregatesFilter | string | null
    exp_month?: IntNullableWithAggregatesFilter | number | null
    exp_year?: IntNullableWithAggregatesFilter | number | null
    zip?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    address2?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    country?: StringNullableWithAggregatesFilter | string | null
    ip?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    state?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    dob?: StringNullableWithAggregatesFilter | string | null
    ssn?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    mmn?: StringNullableWithAggregatesFilter | string | null
    vbv?: StringNullableWithAggregatesFilter | string | null
    acc_no?: StringNullableWithAggregatesFilter | string | null
    driver_license?: StringNullableWithAggregatesFilter | string | null
    dbVersion?: IntWithAggregatesFilter | number
    canRefund?: BoolWithAggregatesFilter | boolean
    refundExpire?: DateTimeNullableWithAggregatesFilter | Date | string | null
    wantRefund?: BoolWithAggregatesFilter | boolean
    userId?: StringNullableWithAggregatesFilter | string | null
    databaseId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: Enumerable<InvoiceWhereInput>
    OR?: Enumerable<InvoiceWhereInput>
    NOT?: Enumerable<InvoiceWhereInput>
    id?: StringFilter | string
    code?: StringFilter | string
    total?: FloatFilter | number
    status?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    total?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type InvoiceWhereUniqueInput = {
    id?: string
  }

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    total?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    total?: FloatWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TicketsWhereInput = {
    AND?: Enumerable<TicketsWhereInput>
    OR?: Enumerable<TicketsWhereInput>
    NOT?: Enumerable<TicketsWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    category?: StringFilter | string
    message?: StringFilter | string
    status?: StringFilter | string
    reporterId?: StringFilter | string
    ticketsId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    reporter?: XOR<UserRelationFilter, UserWhereInput>
    parent?: XOR<TicketsRelationFilter, TicketsWhereInput> | null
    responses?: TicketsListRelationFilter
  }

  export type TicketsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    message?: SortOrder
    status?: SortOrder
    reporterId?: SortOrder
    ticketsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reporter?: UserOrderByWithRelationInput
    parent?: TicketsOrderByWithRelationInput
    responses?: TicketsOrderByRelationAggregateInput
  }

  export type TicketsWhereUniqueInput = {
    id?: string
  }

  export type TicketsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    message?: SortOrder
    status?: SortOrder
    reporterId?: SortOrder
    ticketsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TicketsCountOrderByAggregateInput
    _max?: TicketsMaxOrderByAggregateInput
    _min?: TicketsMinOrderByAggregateInput
  }

  export type TicketsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TicketsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TicketsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TicketsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    reporterId?: StringWithAggregatesFilter | string
    ticketsId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SiteWhereInput = {
    AND?: Enumerable<SiteWhereInput>
    OR?: Enumerable<SiteWhereInput>
    NOT?: Enumerable<SiteWhereInput>
    id?: StringFilter | string
    ballance?: FloatFilter | number
    data?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    ballance?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteWhereUniqueInput = {
    id?: string
  }

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    ballance?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ballance?: FloatWithAggregatesFilter | number
    data?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatisticsWhereInput = {
    AND?: Enumerable<StatisticsWhereInput>
    OR?: Enumerable<StatisticsWhereInput>
    NOT?: Enumerable<StatisticsWhereInput>
    id?: StringFilter | string
    databaseId?: StringNullableFilter | string | null
    data?: StringFilter | string
    Database?: XOR<DatabaseRelationFilter, DatabaseWhereInput> | null
  }

  export type StatisticsOrderByWithRelationInput = {
    id?: SortOrder
    databaseId?: SortOrder
    data?: SortOrder
    Database?: DatabaseOrderByWithRelationInput
  }

  export type StatisticsWhereUniqueInput = {
    id?: string
  }

  export type StatisticsOrderByWithAggregationInput = {
    id?: SortOrder
    databaseId?: SortOrder
    data?: SortOrder
    _count?: StatisticsCountOrderByAggregateInput
    _max?: StatisticsMaxOrderByAggregateInput
    _min?: StatisticsMinOrderByAggregateInput
  }

  export type StatisticsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatisticsScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatisticsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatisticsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    databaseId?: StringNullableWithAggregatesFilter | string | null
    data?: StringWithAggregatesFilter | string
  }

  export type BTC_AddressesWhereInput = {
    AND?: Enumerable<BTC_AddressesWhereInput>
    OR?: Enumerable<BTC_AddressesWhereInput>
    NOT?: Enumerable<BTC_AddressesWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    address?: StringFilter | string
    status?: StringFilter | string
    received_btc?: FloatFilter | number
    received_usd?: FloatFilter | number
    currentBtcPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BTC_AddressesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    status?: SortOrder
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BTC_AddressesWhereUniqueInput = {
    id?: string
  }

  export type BTC_AddressesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    status?: SortOrder
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BTC_AddressesCountOrderByAggregateInput
    _avg?: BTC_AddressesAvgOrderByAggregateInput
    _max?: BTC_AddressesMaxOrderByAggregateInput
    _min?: BTC_AddressesMinOrderByAggregateInput
    _sum?: BTC_AddressesSumOrderByAggregateInput
  }

  export type BTC_AddressesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BTC_AddressesScalarWhereWithAggregatesInput>
    OR?: Enumerable<BTC_AddressesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BTC_AddressesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    received_btc?: FloatWithAggregatesFilter | number
    received_usd?: FloatWithAggregatesFilter | number
    currentBtcPrice?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NewsWhereInput = {
    AND?: Enumerable<NewsWhereInput>
    OR?: Enumerable<NewsWhereInput>
    NOT?: Enumerable<NewsWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    priority?: StringFilter | string
    description?: StringFilter | string
    authorId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type NewsWhereUniqueInput = {
    id?: string
  }

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    priority?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    authorId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ActionsWhereInput = {
    AND?: Enumerable<ActionsWhereInput>
    OR?: Enumerable<ActionsWhereInput>
    NOT?: Enumerable<ActionsWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    data?: StringFilter | string
    userId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ActionsOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ActionsWhereUniqueInput = {
    id?: string
  }

  export type ActionsOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
    _count?: ActionsCountOrderByAggregateInput
    _max?: ActionsMaxOrderByAggregateInput
    _min?: ActionsMinOrderByAggregateInput
  }

  export type ActionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
    userId?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsCreateInput = {
    id?: string
    current: string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionsUncheckedCreateInput = {
    id?: string
    current: string
    userId: string
    expiresAt: Date | string
  }

  export type SessionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsCreateInput = {
    id?: string
    importerPresets?: string
    theme?: string
    canNotify?: boolean
    canAlert?: boolean
    alerts?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type SettingsUncheckedCreateInput = {
    id?: string
    userId: string
    importerPresets?: string
    theme?: string
    canNotify?: boolean
    canAlert?: boolean
    alerts?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type SettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    owner: UserCreateNestedOneWithoutDatabaseInput
    products?: ProductsCreateNestedManyWithoutDatabaseInput
    statistics?: StatisticsCreateNestedOneWithoutDatabaseInput
  }

  export type DatabaseUncheckedCreateInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    statisticsId?: string | null
    products?: ProductsUncheckedCreateNestedManyWithoutDatabaseInput
  }

  export type DatabaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutDatabaseNestedInput
    products?: ProductsUpdateManyWithoutDatabaseNestedInput
    statistics?: StatisticsUpdateOneWithoutDatabaseNestedInput
  }

  export type DatabaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    statisticsId?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductsUncheckedUpdateManyWithoutDatabaseNestedInput
  }

  export type DatabaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type DatabaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    statisticsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductsCreateInput = {
    id?: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: UserCreateNestedOneWithoutSellerProductsInput
    buyer?: UserCreateNestedOneWithoutBuyerProductsInput
    User?: UserCreateNestedOneWithoutProductsInput
    database: DatabaseCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateInput = {
    id?: string
    sellerId: string
    buyerId?: string | null
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    userId?: string | null
    databaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: UserUpdateOneRequiredWithoutSellerProductsNestedInput
    buyer?: UserUpdateOneWithoutBuyerProductsNestedInput
    User?: UserUpdateOneWithoutProductsNestedInput
    database?: DatabaseUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: string
    code: string
    total: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    code: string
    total: number
    status?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsCreateInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutMy_ticketsInput
    parent?: TicketsCreateNestedOneWithoutResponsesInput
    responses?: TicketsCreateNestedManyWithoutParentInput
  }

  export type TicketsUncheckedCreateInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    reporterId: string
    ticketsId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: TicketsUncheckedCreateNestedManyWithoutParentInput
  }

  export type TicketsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutMy_ticketsNestedInput
    parent?: TicketsUpdateOneWithoutResponsesNestedInput
    responses?: TicketsUpdateManyWithoutParentNestedInput
  }

  export type TicketsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    reporterId?: StringFieldUpdateOperationsInput | string
    ticketsId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: TicketsUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TicketsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    reporterId?: StringFieldUpdateOperationsInput | string
    ticketsId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateInput = {
    id?: string
    ballance: number
    data: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUncheckedCreateInput = {
    id?: string
    ballance: number
    data: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ballance?: FloatFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ballance?: FloatFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ballance?: FloatFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ballance?: FloatFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticsCreateInput = {
    id?: string
    databaseId?: string | null
    data: string
    Database?: DatabaseCreateNestedOneWithoutStatisticsInput
  }

  export type StatisticsUncheckedCreateInput = {
    id?: string
    databaseId?: string | null
    data: string
    Database?: DatabaseUncheckedCreateNestedOneWithoutStatisticsInput
  }

  export type StatisticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
    Database?: DatabaseUpdateOneWithoutStatisticsNestedInput
  }

  export type StatisticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
    Database?: DatabaseUncheckedUpdateOneWithoutStatisticsNestedInput
  }

  export type StatisticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatisticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
  }

  export type BTC_AddressesCreateInput = {
    id?: string
    address: string
    status?: string
    received_btc?: number
    received_usd?: number
    currentBtcPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBtc_addressesInput
  }

  export type BTC_AddressesUncheckedCreateInput = {
    id?: string
    userId: string
    address: string
    status?: string
    received_btc?: number
    received_usd?: number
    currentBtcPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BTC_AddressesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBtc_addressesNestedInput
  }

  export type BTC_AddressesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BTC_AddressesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BTC_AddressesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateInput = {
    id?: string
    title: string
    priority?: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutNewsInput
  }

  export type NewsUncheckedCreateInput = {
    id?: string
    title: string
    priority?: string
    description: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsCreateInput = {
    id?: string
    type: string
    data: string
    created_at?: Date | string
    user?: UserCreateNestedOneWithoutActionsInput
  }

  export type ActionsUncheckedCreateInput = {
    id?: string
    type: string
    data: string
    userId?: string | null
    created_at?: Date | string
  }

  export type ActionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActionsNestedInput
  }

  export type ActionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SettingsRelationFilter = {
    is?: SettingsWhereInput | null
    isNot?: SettingsWhereInput | null
  }

  export type SessionsListRelationFilter = {
    every?: SessionsWhereInput
    some?: SessionsWhereInput
    none?: SessionsWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: ProductsWhereInput
    some?: ProductsWhereInput
    none?: ProductsWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DatabaseListRelationFilter = {
    every?: DatabaseWhereInput
    some?: DatabaseWhereInput
    none?: DatabaseWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type TicketsListRelationFilter = {
    every?: TicketsWhereInput
    some?: TicketsWhereInput
    none?: TicketsWhereInput
  }

  export type BTC_AddressesListRelationFilter = {
    every?: BTC_AddressesWhereInput
    some?: BTC_AddressesWhereInput
    none?: BTC_AddressesWhereInput
  }

  export type NewsListRelationFilter = {
    every?: NewsWhereInput
    some?: NewsWhereInput
    none?: NewsWhereInput
  }

  export type ActionsListRelationFilter = {
    every?: ActionsWhereInput
    some?: ActionsWhereInput
    none?: ActionsWhereInput
  }

  export type SessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DatabaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BTC_AddressesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    role?: SortOrder
    password?: SortOrder
    ballance?: SortOrder
    secure?: SortOrder
    status?: SortOrder
    fee?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    ballance?: SortOrder
    fee?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    role?: SortOrder
    password?: SortOrder
    ballance?: SortOrder
    secure?: SortOrder
    status?: SortOrder
    fee?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    role?: SortOrder
    password?: SortOrder
    ballance?: SortOrder
    secure?: SortOrder
    status?: SortOrder
    fee?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    ballance?: SortOrder
    fee?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SessionsCountOrderByAggregateInput = {
    id?: SortOrder
    current?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    current?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionsMinOrderByAggregateInput = {
    id?: SortOrder
    current?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type SettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    importerPresets?: SortOrder
    theme?: SortOrder
    canNotify?: SortOrder
    canAlert?: SortOrder
    alerts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    importerPresets?: SortOrder
    theme?: SortOrder
    canNotify?: SortOrder
    canAlert?: SortOrder
    alerts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    importerPresets?: SortOrder
    theme?: SortOrder
    canNotify?: SortOrder
    canAlert?: SortOrder
    alerts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StatisticsRelationFilter = {
    is?: StatisticsWhereInput | null
    isNot?: StatisticsWhereInput | null
  }

  export type DatabaseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    statisticsId?: SortOrder
  }

  export type DatabaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    statisticsId?: SortOrder
  }

  export type DatabaseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    statisticsId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DatabaseRelationFilter = {
    is?: DatabaseWhereInput | null
    isNot?: DatabaseWhereInput | null
  }

  export type ProductsCountOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    buyerId?: SortOrder
    status?: SortOrder
    price?: SortOrder
    old_price?: SortOrder
    cc_num?: SortOrder
    cvv2?: SortOrder
    skip?: SortOrder
    full_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sort_code?: SortOrder
    misc?: SortOrder
    exp_date?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    country?: SortOrder
    ip?: SortOrder
    type?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    ssn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mmn?: SortOrder
    vbv?: SortOrder
    acc_no?: SortOrder
    driver_license?: SortOrder
    dbVersion?: SortOrder
    canRefund?: SortOrder
    refundExpire?: SortOrder
    wantRefund?: SortOrder
    userId?: SortOrder
    databaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductsAvgOrderByAggregateInput = {
    price?: SortOrder
    old_price?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    dbVersion?: SortOrder
  }

  export type ProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    buyerId?: SortOrder
    status?: SortOrder
    price?: SortOrder
    old_price?: SortOrder
    cc_num?: SortOrder
    cvv2?: SortOrder
    skip?: SortOrder
    full_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sort_code?: SortOrder
    misc?: SortOrder
    exp_date?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    country?: SortOrder
    ip?: SortOrder
    type?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    ssn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mmn?: SortOrder
    vbv?: SortOrder
    acc_no?: SortOrder
    driver_license?: SortOrder
    dbVersion?: SortOrder
    canRefund?: SortOrder
    refundExpire?: SortOrder
    wantRefund?: SortOrder
    userId?: SortOrder
    databaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductsMinOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    buyerId?: SortOrder
    status?: SortOrder
    price?: SortOrder
    old_price?: SortOrder
    cc_num?: SortOrder
    cvv2?: SortOrder
    skip?: SortOrder
    full_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sort_code?: SortOrder
    misc?: SortOrder
    exp_date?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    country?: SortOrder
    ip?: SortOrder
    type?: SortOrder
    state?: SortOrder
    phone?: SortOrder
    dob?: SortOrder
    ssn?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mmn?: SortOrder
    vbv?: SortOrder
    acc_no?: SortOrder
    driver_license?: SortOrder
    dbVersion?: SortOrder
    canRefund?: SortOrder
    refundExpire?: SortOrder
    wantRefund?: SortOrder
    userId?: SortOrder
    databaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductsSumOrderByAggregateInput = {
    price?: SortOrder
    old_price?: SortOrder
    exp_month?: SortOrder
    exp_year?: SortOrder
    dbVersion?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    total?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    total?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    total?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type TicketsRelationFilter = {
    is?: TicketsWhereInput | null
    isNot?: TicketsWhereInput | null
  }

  export type TicketsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    message?: SortOrder
    status?: SortOrder
    reporterId?: SortOrder
    ticketsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    message?: SortOrder
    status?: SortOrder
    reporterId?: SortOrder
    ticketsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    message?: SortOrder
    status?: SortOrder
    reporterId?: SortOrder
    ticketsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    ballance?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    ballance?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    ballance?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    ballance?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    ballance?: SortOrder
  }

  export type StatisticsCountOrderByAggregateInput = {
    id?: SortOrder
    databaseId?: SortOrder
    data?: SortOrder
  }

  export type StatisticsMaxOrderByAggregateInput = {
    id?: SortOrder
    databaseId?: SortOrder
    data?: SortOrder
  }

  export type StatisticsMinOrderByAggregateInput = {
    id?: SortOrder
    databaseId?: SortOrder
    data?: SortOrder
  }

  export type BTC_AddressesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    status?: SortOrder
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BTC_AddressesAvgOrderByAggregateInput = {
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
  }

  export type BTC_AddressesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    status?: SortOrder
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BTC_AddressesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    status?: SortOrder
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BTC_AddressesSumOrderByAggregateInput = {
    received_btc?: SortOrder
    received_usd?: SortOrder
    currentBtcPrice?: SortOrder
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    priority?: SortOrder
    description?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActionsCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
  }

  export type ActionsMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
  }

  export type ActionsMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    created_at?: SortOrder
  }

  export type SettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    connect?: SettingsWhereUniqueInput
  }

  export type SessionsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUserInput>, Enumerable<SessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type ProductsCreateNestedManyWithoutSellerInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutSellerInput>, Enumerable<ProductsUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutSellerInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type ProductsCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutBuyerInput>, Enumerable<ProductsUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutBuyerInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutReferenceInput = {
    create?: XOR<Enumerable<UserCreateWithoutReferenceInput>, Enumerable<UserUncheckedCreateWithoutReferenceInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutReferenceInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutReferenceInput = {
    create?: XOR<UserCreateWithoutReferenceInput, UserUncheckedCreateWithoutReferenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferenceInput
    connect?: UserWhereUniqueInput
  }

  export type ProductsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutUserInput>, Enumerable<ProductsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type DatabaseCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<DatabaseCreateWithoutOwnerInput>, Enumerable<DatabaseUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<DatabaseCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<DatabaseWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type TicketsCreateNestedManyWithoutReporterInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutReporterInput>, Enumerable<TicketsUncheckedCreateWithoutReporterInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutReporterInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
  }

  export type BTC_AddressesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BTC_AddressesCreateWithoutUserInput>, Enumerable<BTC_AddressesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BTC_AddressesCreateOrConnectWithoutUserInput>
    connect?: Enumerable<BTC_AddressesWhereUniqueInput>
  }

  export type NewsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<NewsCreateWithoutAuthorInput>, Enumerable<NewsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutAuthorInput>
    connect?: Enumerable<NewsWhereUniqueInput>
  }

  export type ActionsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ActionsCreateWithoutUserInput>, Enumerable<ActionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ActionsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ActionsWhereUniqueInput>
  }

  export type SettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    connect?: SettingsWhereUniqueInput
  }

  export type SessionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUserInput>, Enumerable<SessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type ProductsUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutSellerInput>, Enumerable<ProductsUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutSellerInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type ProductsUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutBuyerInput>, Enumerable<ProductsUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutBuyerInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutReferenceInput = {
    create?: XOR<Enumerable<UserCreateWithoutReferenceInput>, Enumerable<UserUncheckedCreateWithoutReferenceInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutReferenceInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ProductsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutUserInput>, Enumerable<ProductsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type DatabaseUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<DatabaseCreateWithoutOwnerInput>, Enumerable<DatabaseUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<DatabaseCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<DatabaseWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type TicketsUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutReporterInput>, Enumerable<TicketsUncheckedCreateWithoutReporterInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutReporterInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
  }

  export type BTC_AddressesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BTC_AddressesCreateWithoutUserInput>, Enumerable<BTC_AddressesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BTC_AddressesCreateOrConnectWithoutUserInput>
    connect?: Enumerable<BTC_AddressesWhereUniqueInput>
  }

  export type NewsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<NewsCreateWithoutAuthorInput>, Enumerable<NewsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutAuthorInput>
    connect?: Enumerable<NewsWhereUniqueInput>
  }

  export type ActionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ActionsCreateWithoutUserInput>, Enumerable<ActionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ActionsCreateOrConnectWithoutUserInput>
    connect?: Enumerable<ActionsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    upsert?: SettingsUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SettingsWhereUniqueInput
    update?: XOR<SettingsUpdateWithoutUserInput, SettingsUncheckedUpdateWithoutUserInput>
  }

  export type SessionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUserInput>, Enumerable<SessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type ProductsUpdateManyWithoutSellerNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutSellerInput>, Enumerable<ProductsUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutSellerInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutSellerInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutSellerInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutSellerInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type ProductsUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutBuyerInput>, Enumerable<ProductsUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutBuyerInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type UserUpdateManyWithoutReferenceNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutReferenceInput>, Enumerable<UserUncheckedCreateWithoutReferenceInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutReferenceInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutReferenceInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutReferenceInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutReferenceInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateOneWithoutReferenceNestedInput = {
    create?: XOR<UserCreateWithoutReferenceInput, UserUncheckedCreateWithoutReferenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferenceInput
    upsert?: UserUpsertWithoutReferenceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReferenceInput, UserUncheckedUpdateWithoutReferenceInput>
  }

  export type ProductsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutUserInput>, Enumerable<ProductsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type DatabaseUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<DatabaseCreateWithoutOwnerInput>, Enumerable<DatabaseUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<DatabaseCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<DatabaseUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<DatabaseWhereUniqueInput>
    disconnect?: Enumerable<DatabaseWhereUniqueInput>
    delete?: Enumerable<DatabaseWhereUniqueInput>
    connect?: Enumerable<DatabaseWhereUniqueInput>
    update?: Enumerable<DatabaseUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<DatabaseUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<DatabaseScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type TicketsUpdateManyWithoutReporterNestedInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutReporterInput>, Enumerable<TicketsUncheckedCreateWithoutReporterInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutReporterInput>
    upsert?: Enumerable<TicketsUpsertWithWhereUniqueWithoutReporterInput>
    set?: Enumerable<TicketsWhereUniqueInput>
    disconnect?: Enumerable<TicketsWhereUniqueInput>
    delete?: Enumerable<TicketsWhereUniqueInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
    update?: Enumerable<TicketsUpdateWithWhereUniqueWithoutReporterInput>
    updateMany?: Enumerable<TicketsUpdateManyWithWhereWithoutReporterInput>
    deleteMany?: Enumerable<TicketsScalarWhereInput>
  }

  export type BTC_AddressesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BTC_AddressesCreateWithoutUserInput>, Enumerable<BTC_AddressesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BTC_AddressesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BTC_AddressesUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<BTC_AddressesWhereUniqueInput>
    disconnect?: Enumerable<BTC_AddressesWhereUniqueInput>
    delete?: Enumerable<BTC_AddressesWhereUniqueInput>
    connect?: Enumerable<BTC_AddressesWhereUniqueInput>
    update?: Enumerable<BTC_AddressesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BTC_AddressesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BTC_AddressesScalarWhereInput>
  }

  export type NewsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<NewsCreateWithoutAuthorInput>, Enumerable<NewsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<NewsUpsertWithWhereUniqueWithoutAuthorInput>
    set?: Enumerable<NewsWhereUniqueInput>
    disconnect?: Enumerable<NewsWhereUniqueInput>
    delete?: Enumerable<NewsWhereUniqueInput>
    connect?: Enumerable<NewsWhereUniqueInput>
    update?: Enumerable<NewsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<NewsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<NewsScalarWhereInput>
  }

  export type ActionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ActionsCreateWithoutUserInput>, Enumerable<ActionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ActionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ActionsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ActionsWhereUniqueInput>
    disconnect?: Enumerable<ActionsWhereUniqueInput>
    delete?: Enumerable<ActionsWhereUniqueInput>
    connect?: Enumerable<ActionsWhereUniqueInput>
    update?: Enumerable<ActionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ActionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ActionsScalarWhereInput>
  }

  export type SettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: SettingsCreateOrConnectWithoutUserInput
    upsert?: SettingsUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SettingsWhereUniqueInput
    update?: XOR<SettingsUpdateWithoutUserInput, SettingsUncheckedUpdateWithoutUserInput>
  }

  export type SessionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUserInput>, Enumerable<SessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type ProductsUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutSellerInput>, Enumerable<ProductsUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutSellerInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutSellerInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutSellerInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutSellerInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type ProductsUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutBuyerInput>, Enumerable<ProductsUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutBuyerInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutReferenceNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutReferenceInput>, Enumerable<UserUncheckedCreateWithoutReferenceInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutReferenceInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutReferenceInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutReferenceInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutReferenceInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ProductsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutUserInput>, Enumerable<ProductsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type DatabaseUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<DatabaseCreateWithoutOwnerInput>, Enumerable<DatabaseUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<DatabaseCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<DatabaseUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<DatabaseWhereUniqueInput>
    disconnect?: Enumerable<DatabaseWhereUniqueInput>
    delete?: Enumerable<DatabaseWhereUniqueInput>
    connect?: Enumerable<DatabaseWhereUniqueInput>
    update?: Enumerable<DatabaseUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<DatabaseUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<DatabaseScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type TicketsUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutReporterInput>, Enumerable<TicketsUncheckedCreateWithoutReporterInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutReporterInput>
    upsert?: Enumerable<TicketsUpsertWithWhereUniqueWithoutReporterInput>
    set?: Enumerable<TicketsWhereUniqueInput>
    disconnect?: Enumerable<TicketsWhereUniqueInput>
    delete?: Enumerable<TicketsWhereUniqueInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
    update?: Enumerable<TicketsUpdateWithWhereUniqueWithoutReporterInput>
    updateMany?: Enumerable<TicketsUpdateManyWithWhereWithoutReporterInput>
    deleteMany?: Enumerable<TicketsScalarWhereInput>
  }

  export type BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BTC_AddressesCreateWithoutUserInput>, Enumerable<BTC_AddressesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BTC_AddressesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BTC_AddressesUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<BTC_AddressesWhereUniqueInput>
    disconnect?: Enumerable<BTC_AddressesWhereUniqueInput>
    delete?: Enumerable<BTC_AddressesWhereUniqueInput>
    connect?: Enumerable<BTC_AddressesWhereUniqueInput>
    update?: Enumerable<BTC_AddressesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BTC_AddressesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BTC_AddressesScalarWhereInput>
  }

  export type NewsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<NewsCreateWithoutAuthorInput>, Enumerable<NewsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<NewsUpsertWithWhereUniqueWithoutAuthorInput>
    set?: Enumerable<NewsWhereUniqueInput>
    disconnect?: Enumerable<NewsWhereUniqueInput>
    delete?: Enumerable<NewsWhereUniqueInput>
    connect?: Enumerable<NewsWhereUniqueInput>
    update?: Enumerable<NewsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<NewsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<NewsScalarWhereInput>
  }

  export type ActionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ActionsCreateWithoutUserInput>, Enumerable<ActionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ActionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ActionsUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<ActionsWhereUniqueInput>
    disconnect?: Enumerable<ActionsWhereUniqueInput>
    delete?: Enumerable<ActionsWhereUniqueInput>
    connect?: Enumerable<ActionsWhereUniqueInput>
    update?: Enumerable<ActionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ActionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ActionsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserCreateNestedOneWithoutDatabaseInput = {
    create?: XOR<UserCreateWithoutDatabaseInput, UserUncheckedCreateWithoutDatabaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutDatabaseInput
    connect?: UserWhereUniqueInput
  }

  export type ProductsCreateNestedManyWithoutDatabaseInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutDatabaseInput>, Enumerable<ProductsUncheckedCreateWithoutDatabaseInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutDatabaseInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type StatisticsCreateNestedOneWithoutDatabaseInput = {
    create?: XOR<StatisticsCreateWithoutDatabaseInput, StatisticsUncheckedCreateWithoutDatabaseInput>
    connectOrCreate?: StatisticsCreateOrConnectWithoutDatabaseInput
    connect?: StatisticsWhereUniqueInput
  }

  export type ProductsUncheckedCreateNestedManyWithoutDatabaseInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutDatabaseInput>, Enumerable<ProductsUncheckedCreateWithoutDatabaseInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutDatabaseInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutDatabaseNestedInput = {
    create?: XOR<UserCreateWithoutDatabaseInput, UserUncheckedCreateWithoutDatabaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutDatabaseInput
    upsert?: UserUpsertWithoutDatabaseInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDatabaseInput, UserUncheckedUpdateWithoutDatabaseInput>
  }

  export type ProductsUpdateManyWithoutDatabaseNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutDatabaseInput>, Enumerable<ProductsUncheckedCreateWithoutDatabaseInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutDatabaseInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutDatabaseInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutDatabaseInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutDatabaseInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type StatisticsUpdateOneWithoutDatabaseNestedInput = {
    create?: XOR<StatisticsCreateWithoutDatabaseInput, StatisticsUncheckedCreateWithoutDatabaseInput>
    connectOrCreate?: StatisticsCreateOrConnectWithoutDatabaseInput
    upsert?: StatisticsUpsertWithoutDatabaseInput
    disconnect?: boolean
    delete?: boolean
    connect?: StatisticsWhereUniqueInput
    update?: XOR<StatisticsUpdateWithoutDatabaseInput, StatisticsUncheckedUpdateWithoutDatabaseInput>
  }

  export type ProductsUncheckedUpdateManyWithoutDatabaseNestedInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutDatabaseInput>, Enumerable<ProductsUncheckedCreateWithoutDatabaseInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutDatabaseInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutDatabaseInput>
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutDatabaseInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutDatabaseInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSellerProductsInput = {
    create?: XOR<UserCreateWithoutSellerProductsInput, UserUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerProductsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBuyerProductsInput = {
    create?: XOR<UserCreateWithoutBuyerProductsInput, UserUncheckedCreateWithoutBuyerProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyerProductsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProductsInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    connect?: UserWhereUniqueInput
  }

  export type DatabaseCreateNestedOneWithoutProductsInput = {
    create?: XOR<DatabaseCreateWithoutProductsInput, DatabaseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutProductsInput
    connect?: DatabaseWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutSellerProductsNestedInput = {
    create?: XOR<UserCreateWithoutSellerProductsInput, UserUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerProductsInput
    upsert?: UserUpsertWithoutSellerProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSellerProductsInput, UserUncheckedUpdateWithoutSellerProductsInput>
  }

  export type UserUpdateOneWithoutBuyerProductsNestedInput = {
    create?: XOR<UserCreateWithoutBuyerProductsInput, UserUncheckedCreateWithoutBuyerProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyerProductsInput
    upsert?: UserUpsertWithoutBuyerProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBuyerProductsInput, UserUncheckedUpdateWithoutBuyerProductsInput>
  }

  export type UserUpdateOneWithoutProductsNestedInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    upsert?: UserUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
  }

  export type DatabaseUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<DatabaseCreateWithoutProductsInput, DatabaseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutProductsInput
    upsert?: DatabaseUpsertWithoutProductsInput
    connect?: DatabaseWhereUniqueInput
    update?: XOR<DatabaseUpdateWithoutProductsInput, DatabaseUncheckedUpdateWithoutProductsInput>
  }

  export type UserCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    upsert?: UserUpsertWithoutInvoicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserCreateNestedOneWithoutMy_ticketsInput = {
    create?: XOR<UserCreateWithoutMy_ticketsInput, UserUncheckedCreateWithoutMy_ticketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_ticketsInput
    connect?: UserWhereUniqueInput
  }

  export type TicketsCreateNestedOneWithoutResponsesInput = {
    create?: XOR<TicketsCreateWithoutResponsesInput, TicketsUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutResponsesInput
    connect?: TicketsWhereUniqueInput
  }

  export type TicketsCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutParentInput>, Enumerable<TicketsUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutParentInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
  }

  export type TicketsUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutParentInput>, Enumerable<TicketsUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutParentInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutMy_ticketsNestedInput = {
    create?: XOR<UserCreateWithoutMy_ticketsInput, UserUncheckedCreateWithoutMy_ticketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_ticketsInput
    upsert?: UserUpsertWithoutMy_ticketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMy_ticketsInput, UserUncheckedUpdateWithoutMy_ticketsInput>
  }

  export type TicketsUpdateOneWithoutResponsesNestedInput = {
    create?: XOR<TicketsCreateWithoutResponsesInput, TicketsUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutResponsesInput
    upsert?: TicketsUpsertWithoutResponsesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TicketsWhereUniqueInput
    update?: XOR<TicketsUpdateWithoutResponsesInput, TicketsUncheckedUpdateWithoutResponsesInput>
  }

  export type TicketsUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutParentInput>, Enumerable<TicketsUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<TicketsUpsertWithWhereUniqueWithoutParentInput>
    set?: Enumerable<TicketsWhereUniqueInput>
    disconnect?: Enumerable<TicketsWhereUniqueInput>
    delete?: Enumerable<TicketsWhereUniqueInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
    update?: Enumerable<TicketsUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<TicketsUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<TicketsScalarWhereInput>
  }

  export type TicketsUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<TicketsCreateWithoutParentInput>, Enumerable<TicketsUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<TicketsCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<TicketsUpsertWithWhereUniqueWithoutParentInput>
    set?: Enumerable<TicketsWhereUniqueInput>
    disconnect?: Enumerable<TicketsWhereUniqueInput>
    delete?: Enumerable<TicketsWhereUniqueInput>
    connect?: Enumerable<TicketsWhereUniqueInput>
    update?: Enumerable<TicketsUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<TicketsUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<TicketsScalarWhereInput>
  }

  export type DatabaseCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutStatisticsInput
    connect?: DatabaseWhereUniqueInput
  }

  export type DatabaseUncheckedCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutStatisticsInput
    connect?: DatabaseWhereUniqueInput
  }

  export type DatabaseUpdateOneWithoutStatisticsNestedInput = {
    create?: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutStatisticsInput
    upsert?: DatabaseUpsertWithoutStatisticsInput
    disconnect?: boolean
    delete?: boolean
    connect?: DatabaseWhereUniqueInput
    update?: XOR<DatabaseUpdateWithoutStatisticsInput, DatabaseUncheckedUpdateWithoutStatisticsInput>
  }

  export type DatabaseUncheckedUpdateOneWithoutStatisticsNestedInput = {
    create?: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: DatabaseCreateOrConnectWithoutStatisticsInput
    upsert?: DatabaseUpsertWithoutStatisticsInput
    disconnect?: boolean
    delete?: boolean
    connect?: DatabaseWhereUniqueInput
    update?: XOR<DatabaseUpdateWithoutStatisticsInput, DatabaseUncheckedUpdateWithoutStatisticsInput>
  }

  export type UserCreateNestedOneWithoutBtc_addressesInput = {
    create?: XOR<UserCreateWithoutBtc_addressesInput, UserUncheckedCreateWithoutBtc_addressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBtc_addressesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBtc_addressesNestedInput = {
    create?: XOR<UserCreateWithoutBtc_addressesInput, UserUncheckedCreateWithoutBtc_addressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBtc_addressesInput
    upsert?: UserUpsertWithoutBtc_addressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBtc_addressesInput, UserUncheckedUpdateWithoutBtc_addressesInput>
  }

  export type UserCreateNestedOneWithoutNewsInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNewsNestedInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    upsert?: UserUpsertWithoutNewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
  }

  export type UserCreateNestedOneWithoutActionsInput = {
    create?: XOR<UserCreateWithoutActionsInput, UserUncheckedCreateWithoutActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutActionsNestedInput = {
    create?: XOR<UserCreateWithoutActionsInput, UserUncheckedCreateWithoutActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActionsInput
    upsert?: UserUpsertWithoutActionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutActionsInput, UserUncheckedUpdateWithoutActionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type SettingsCreateWithoutUserInput = {
    id?: string
    importerPresets?: string
    theme?: string
    canNotify?: boolean
    canAlert?: boolean
    alerts?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUncheckedCreateWithoutUserInput = {
    id?: string
    importerPresets?: string
    theme?: string
    canNotify?: boolean
    canAlert?: boolean
    alerts?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsCreateOrConnectWithoutUserInput = {
    where: SettingsWhereUniqueInput
    create: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
  }

  export type SessionsCreateWithoutUserInput = {
    id?: string
    current: string
    expiresAt: Date | string
  }

  export type SessionsUncheckedCreateWithoutUserInput = {
    id?: string
    current: string
    expiresAt: Date | string
  }

  export type SessionsCreateOrConnectWithoutUserInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutUserInput, SessionsUncheckedCreateWithoutUserInput>
  }

  export type ProductsCreateWithoutSellerInput = {
    id?: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutBuyerProductsInput
    User?: UserCreateNestedOneWithoutProductsInput
    database: DatabaseCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutSellerInput = {
    id?: string
    buyerId?: string | null
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    userId?: string | null
    databaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductsCreateOrConnectWithoutSellerInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutSellerInput, ProductsUncheckedCreateWithoutSellerInput>
  }

  export type ProductsCreateWithoutBuyerInput = {
    id?: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: UserCreateNestedOneWithoutSellerProductsInput
    User?: UserCreateNestedOneWithoutProductsInput
    database: DatabaseCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutBuyerInput = {
    id?: string
    sellerId: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    userId?: string | null
    databaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductsCreateOrConnectWithoutBuyerInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutBuyerInput, ProductsUncheckedCreateWithoutBuyerInput>
  }

  export type UserCreateWithoutReferenceInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferenceInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferenceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferenceInput, UserUncheckedCreateWithoutReferenceInput>
  }

  export type ProductsCreateWithoutUserInput = {
    id?: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: UserCreateNestedOneWithoutSellerProductsInput
    buyer?: UserCreateNestedOneWithoutBuyerProductsInput
    database: DatabaseCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutUserInput = {
    id?: string
    sellerId: string
    buyerId?: string | null
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    databaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductsCreateOrConnectWithoutUserInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput>
  }

  export type DatabaseCreateWithoutOwnerInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    products?: ProductsCreateNestedManyWithoutDatabaseInput
    statistics?: StatisticsCreateNestedOneWithoutDatabaseInput
  }

  export type DatabaseUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    statisticsId?: string | null
    products?: ProductsUncheckedCreateNestedManyWithoutDatabaseInput
  }

  export type DatabaseCreateOrConnectWithoutOwnerInput = {
    where: DatabaseWhereUniqueInput
    create: XOR<DatabaseCreateWithoutOwnerInput, DatabaseUncheckedCreateWithoutOwnerInput>
  }

  export type InvoiceCreateWithoutUserInput = {
    id?: string
    code: string
    total: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    total: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateOrConnectWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type TicketsCreateWithoutReporterInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: TicketsCreateNestedOneWithoutResponsesInput
    responses?: TicketsCreateNestedManyWithoutParentInput
  }

  export type TicketsUncheckedCreateWithoutReporterInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    ticketsId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: TicketsUncheckedCreateNestedManyWithoutParentInput
  }

  export type TicketsCreateOrConnectWithoutReporterInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutReporterInput, TicketsUncheckedCreateWithoutReporterInput>
  }

  export type BTC_AddressesCreateWithoutUserInput = {
    id?: string
    address: string
    status?: string
    received_btc?: number
    received_usd?: number
    currentBtcPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BTC_AddressesUncheckedCreateWithoutUserInput = {
    id?: string
    address: string
    status?: string
    received_btc?: number
    received_usd?: number
    currentBtcPrice?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BTC_AddressesCreateOrConnectWithoutUserInput = {
    where: BTC_AddressesWhereUniqueInput
    create: XOR<BTC_AddressesCreateWithoutUserInput, BTC_AddressesUncheckedCreateWithoutUserInput>
  }

  export type NewsCreateWithoutAuthorInput = {
    id?: string
    title: string
    priority?: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    priority?: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsCreateOrConnectWithoutAuthorInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutAuthorInput, NewsUncheckedCreateWithoutAuthorInput>
  }

  export type ActionsCreateWithoutUserInput = {
    id?: string
    type: string
    data: string
    created_at?: Date | string
  }

  export type ActionsUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    data: string
    created_at?: Date | string
  }

  export type ActionsCreateOrConnectWithoutUserInput = {
    where: ActionsWhereUniqueInput
    create: XOR<ActionsCreateWithoutUserInput, ActionsUncheckedCreateWithoutUserInput>
  }

  export type SettingsUpsertWithoutUserInput = {
    update: XOR<SettingsUpdateWithoutUserInput, SettingsUncheckedUpdateWithoutUserInput>
    create: XOR<SettingsCreateWithoutUserInput, SettingsUncheckedCreateWithoutUserInput>
  }

  export type SettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    importerPresets?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    canNotify?: BoolFieldUpdateOperationsInput | boolean
    canAlert?: BoolFieldUpdateOperationsInput | boolean
    alerts?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionsWhereUniqueInput
    update: XOR<SessionsUpdateWithoutUserInput, SessionsUncheckedUpdateWithoutUserInput>
    create: XOR<SessionsCreateWithoutUserInput, SessionsUncheckedCreateWithoutUserInput>
  }

  export type SessionsUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionsWhereUniqueInput
    data: XOR<SessionsUpdateWithoutUserInput, SessionsUncheckedUpdateWithoutUserInput>
  }

  export type SessionsUpdateManyWithWhereWithoutUserInput = {
    where: SessionsScalarWhereInput
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionsScalarWhereInput = {
    AND?: Enumerable<SessionsScalarWhereInput>
    OR?: Enumerable<SessionsScalarWhereInput>
    NOT?: Enumerable<SessionsScalarWhereInput>
    id?: StringFilter | string
    current?: StringFilter | string
    userId?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
  }

  export type ProductsUpsertWithWhereUniqueWithoutSellerInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutSellerInput, ProductsUncheckedUpdateWithoutSellerInput>
    create: XOR<ProductsCreateWithoutSellerInput, ProductsUncheckedCreateWithoutSellerInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutSellerInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutSellerInput, ProductsUncheckedUpdateWithoutSellerInput>
  }

  export type ProductsUpdateManyWithWhereWithoutSellerInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutSellerProductsInput>
  }

  export type ProductsScalarWhereInput = {
    AND?: Enumerable<ProductsScalarWhereInput>
    OR?: Enumerable<ProductsScalarWhereInput>
    NOT?: Enumerable<ProductsScalarWhereInput>
    id?: StringFilter | string
    sellerId?: StringFilter | string
    buyerId?: StringNullableFilter | string | null
    status?: StringFilter | string
    price?: FloatFilter | number
    old_price?: FloatNullableFilter | number | null
    cc_num?: StringFilter | string
    cvv2?: StringFilter | string
    skip?: StringNullableFilter | string | null
    full_name?: StringNullableFilter | string | null
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    sort_code?: StringNullableFilter | string | null
    misc?: StringNullableFilter | string | null
    exp_date?: StringNullableFilter | string | null
    exp_month?: IntNullableFilter | number | null
    exp_year?: IntNullableFilter | number | null
    zip?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    address2?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    dob?: StringNullableFilter | string | null
    ssn?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    mmn?: StringNullableFilter | string | null
    vbv?: StringNullableFilter | string | null
    acc_no?: StringNullableFilter | string | null
    driver_license?: StringNullableFilter | string | null
    dbVersion?: IntFilter | number
    canRefund?: BoolFilter | boolean
    refundExpire?: DateTimeNullableFilter | Date | string | null
    wantRefund?: BoolFilter | boolean
    userId?: StringNullableFilter | string | null
    databaseId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProductsUpsertWithWhereUniqueWithoutBuyerInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutBuyerInput, ProductsUncheckedUpdateWithoutBuyerInput>
    create: XOR<ProductsCreateWithoutBuyerInput, ProductsUncheckedCreateWithoutBuyerInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutBuyerInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutBuyerInput, ProductsUncheckedUpdateWithoutBuyerInput>
  }

  export type ProductsUpdateManyWithWhereWithoutBuyerInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutBuyerProductsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutReferenceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferenceInput, UserUncheckedUpdateWithoutReferenceInput>
    create: XOR<UserCreateWithoutReferenceInput, UserUncheckedCreateWithoutReferenceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferenceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferenceInput, UserUncheckedUpdateWithoutReferenceInput>
  }

  export type UserUpdateManyWithWhereWithoutReferenceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferenceInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    role?: StringFilter | string
    password?: StringFilter | string
    ballance?: FloatNullableFilter | number | null
    secure?: BoolNullableFilter | boolean | null
    status?: StringNullableFilter | string | null
    fee?: FloatNullableFilter | number | null
    referenceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithoutReferenceInput = {
    update: XOR<UserUpdateWithoutReferenceInput, UserUncheckedUpdateWithoutReferenceInput>
    create: XOR<UserCreateWithoutReferenceInput, UserUncheckedCreateWithoutReferenceInput>
  }

  export type UserUpdateWithoutReferenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductsUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutUserInput, ProductsUncheckedUpdateWithoutUserInput>
    create: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutUserInput, ProductsUncheckedUpdateWithoutUserInput>
  }

  export type ProductsUpdateManyWithWhereWithoutUserInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type DatabaseUpsertWithWhereUniqueWithoutOwnerInput = {
    where: DatabaseWhereUniqueInput
    update: XOR<DatabaseUpdateWithoutOwnerInput, DatabaseUncheckedUpdateWithoutOwnerInput>
    create: XOR<DatabaseCreateWithoutOwnerInput, DatabaseUncheckedCreateWithoutOwnerInput>
  }

  export type DatabaseUpdateWithWhereUniqueWithoutOwnerInput = {
    where: DatabaseWhereUniqueInput
    data: XOR<DatabaseUpdateWithoutOwnerInput, DatabaseUncheckedUpdateWithoutOwnerInput>
  }

  export type DatabaseUpdateManyWithWhereWithoutOwnerInput = {
    where: DatabaseScalarWhereInput
    data: XOR<DatabaseUpdateManyMutationInput, DatabaseUncheckedUpdateManyWithoutDatabaseInput>
  }

  export type DatabaseScalarWhereInput = {
    AND?: Enumerable<DatabaseScalarWhereInput>
    OR?: Enumerable<DatabaseScalarWhereInput>
    NOT?: Enumerable<DatabaseScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    ownerId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    statisticsId?: StringNullableFilter | string | null
  }

  export type InvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoicesInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: Enumerable<InvoiceScalarWhereInput>
    OR?: Enumerable<InvoiceScalarWhereInput>
    NOT?: Enumerable<InvoiceScalarWhereInput>
    id?: StringFilter | string
    code?: StringFilter | string
    total?: FloatFilter | number
    status?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TicketsUpsertWithWhereUniqueWithoutReporterInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutReporterInput, TicketsUncheckedUpdateWithoutReporterInput>
    create: XOR<TicketsCreateWithoutReporterInput, TicketsUncheckedCreateWithoutReporterInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutReporterInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutReporterInput, TicketsUncheckedUpdateWithoutReporterInput>
  }

  export type TicketsUpdateManyWithWhereWithoutReporterInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutMy_ticketsInput>
  }

  export type TicketsScalarWhereInput = {
    AND?: Enumerable<TicketsScalarWhereInput>
    OR?: Enumerable<TicketsScalarWhereInput>
    NOT?: Enumerable<TicketsScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    category?: StringFilter | string
    message?: StringFilter | string
    status?: StringFilter | string
    reporterId?: StringFilter | string
    ticketsId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BTC_AddressesUpsertWithWhereUniqueWithoutUserInput = {
    where: BTC_AddressesWhereUniqueInput
    update: XOR<BTC_AddressesUpdateWithoutUserInput, BTC_AddressesUncheckedUpdateWithoutUserInput>
    create: XOR<BTC_AddressesCreateWithoutUserInput, BTC_AddressesUncheckedCreateWithoutUserInput>
  }

  export type BTC_AddressesUpdateWithWhereUniqueWithoutUserInput = {
    where: BTC_AddressesWhereUniqueInput
    data: XOR<BTC_AddressesUpdateWithoutUserInput, BTC_AddressesUncheckedUpdateWithoutUserInput>
  }

  export type BTC_AddressesUpdateManyWithWhereWithoutUserInput = {
    where: BTC_AddressesScalarWhereInput
    data: XOR<BTC_AddressesUpdateManyMutationInput, BTC_AddressesUncheckedUpdateManyWithoutBtc_addressesInput>
  }

  export type BTC_AddressesScalarWhereInput = {
    AND?: Enumerable<BTC_AddressesScalarWhereInput>
    OR?: Enumerable<BTC_AddressesScalarWhereInput>
    NOT?: Enumerable<BTC_AddressesScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    address?: StringFilter | string
    status?: StringFilter | string
    received_btc?: FloatFilter | number
    received_usd?: FloatFilter | number
    currentBtcPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type NewsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: NewsWhereUniqueInput
    update: XOR<NewsUpdateWithoutAuthorInput, NewsUncheckedUpdateWithoutAuthorInput>
    create: XOR<NewsCreateWithoutAuthorInput, NewsUncheckedCreateWithoutAuthorInput>
  }

  export type NewsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: NewsWhereUniqueInput
    data: XOR<NewsUpdateWithoutAuthorInput, NewsUncheckedUpdateWithoutAuthorInput>
  }

  export type NewsUpdateManyWithWhereWithoutAuthorInput = {
    where: NewsScalarWhereInput
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyWithoutNewsInput>
  }

  export type NewsScalarWhereInput = {
    AND?: Enumerable<NewsScalarWhereInput>
    OR?: Enumerable<NewsScalarWhereInput>
    NOT?: Enumerable<NewsScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    priority?: StringFilter | string
    description?: StringFilter | string
    authorId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ActionsUpsertWithWhereUniqueWithoutUserInput = {
    where: ActionsWhereUniqueInput
    update: XOR<ActionsUpdateWithoutUserInput, ActionsUncheckedUpdateWithoutUserInput>
    create: XOR<ActionsCreateWithoutUserInput, ActionsUncheckedCreateWithoutUserInput>
  }

  export type ActionsUpdateWithWhereUniqueWithoutUserInput = {
    where: ActionsWhereUniqueInput
    data: XOR<ActionsUpdateWithoutUserInput, ActionsUncheckedUpdateWithoutUserInput>
  }

  export type ActionsUpdateManyWithWhereWithoutUserInput = {
    where: ActionsScalarWhereInput
    data: XOR<ActionsUpdateManyMutationInput, ActionsUncheckedUpdateManyWithoutActionsInput>
  }

  export type ActionsScalarWhereInput = {
    AND?: Enumerable<ActionsScalarWhereInput>
    OR?: Enumerable<ActionsScalarWhereInput>
    NOT?: Enumerable<ActionsScalarWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    data?: StringFilter | string
    userId?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDatabaseInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDatabaseInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDatabaseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDatabaseInput, UserUncheckedCreateWithoutDatabaseInput>
  }

  export type ProductsCreateWithoutDatabaseInput = {
    id?: string
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: UserCreateNestedOneWithoutSellerProductsInput
    buyer?: UserCreateNestedOneWithoutBuyerProductsInput
    User?: UserCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutDatabaseInput = {
    id?: string
    sellerId: string
    buyerId?: string | null
    status?: string
    price: number
    old_price?: number | null
    cc_num: string
    cvv2: string
    skip?: string | null
    full_name?: string | null
    first_name?: string | null
    last_name?: string | null
    sort_code?: string | null
    misc?: string | null
    exp_date?: string | null
    exp_month?: number | null
    exp_year?: number | null
    zip?: string | null
    address?: string | null
    address2?: string | null
    city?: string | null
    country?: string | null
    ip?: string | null
    type?: string | null
    state?: string | null
    phone?: string | null
    dob?: string | null
    ssn?: string | null
    email?: string | null
    password?: string | null
    mmn?: string | null
    vbv?: string | null
    acc_no?: string | null
    driver_license?: string | null
    dbVersion?: number
    canRefund?: boolean
    refundExpire?: Date | string | null
    wantRefund?: boolean
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductsCreateOrConnectWithoutDatabaseInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutDatabaseInput, ProductsUncheckedCreateWithoutDatabaseInput>
  }

  export type StatisticsCreateWithoutDatabaseInput = {
    id?: string
    databaseId?: string | null
    data: string
  }

  export type StatisticsUncheckedCreateWithoutDatabaseInput = {
    id?: string
    databaseId?: string | null
    data: string
  }

  export type StatisticsCreateOrConnectWithoutDatabaseInput = {
    where: StatisticsWhereUniqueInput
    create: XOR<StatisticsCreateWithoutDatabaseInput, StatisticsUncheckedCreateWithoutDatabaseInput>
  }

  export type UserUpsertWithoutDatabaseInput = {
    update: XOR<UserUpdateWithoutDatabaseInput, UserUncheckedUpdateWithoutDatabaseInput>
    create: XOR<UserCreateWithoutDatabaseInput, UserUncheckedCreateWithoutDatabaseInput>
  }

  export type UserUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductsUpsertWithWhereUniqueWithoutDatabaseInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutDatabaseInput, ProductsUncheckedUpdateWithoutDatabaseInput>
    create: XOR<ProductsCreateWithoutDatabaseInput, ProductsUncheckedCreateWithoutDatabaseInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutDatabaseInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutDatabaseInput, ProductsUncheckedUpdateWithoutDatabaseInput>
  }

  export type ProductsUpdateManyWithWhereWithoutDatabaseInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type StatisticsUpsertWithoutDatabaseInput = {
    update: XOR<StatisticsUpdateWithoutDatabaseInput, StatisticsUncheckedUpdateWithoutDatabaseInput>
    create: XOR<StatisticsCreateWithoutDatabaseInput, StatisticsUncheckedCreateWithoutDatabaseInput>
  }

  export type StatisticsUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StatisticsUncheckedUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    databaseId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutSellerProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSellerProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSellerProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSellerProductsInput, UserUncheckedCreateWithoutSellerProductsInput>
  }

  export type UserCreateWithoutBuyerProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBuyerProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBuyerProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBuyerProductsInput, UserUncheckedCreateWithoutBuyerProductsInput>
  }

  export type UserCreateWithoutProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type DatabaseCreateWithoutProductsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    owner: UserCreateNestedOneWithoutDatabaseInput
    statistics?: StatisticsCreateNestedOneWithoutDatabaseInput
  }

  export type DatabaseUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    statisticsId?: string | null
  }

  export type DatabaseCreateOrConnectWithoutProductsInput = {
    where: DatabaseWhereUniqueInput
    create: XOR<DatabaseCreateWithoutProductsInput, DatabaseUncheckedCreateWithoutProductsInput>
  }

  export type UserUpsertWithoutSellerProductsInput = {
    update: XOR<UserUpdateWithoutSellerProductsInput, UserUncheckedUpdateWithoutSellerProductsInput>
    create: XOR<UserCreateWithoutSellerProductsInput, UserUncheckedCreateWithoutSellerProductsInput>
  }

  export type UserUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutBuyerProductsInput = {
    update: XOR<UserUpdateWithoutBuyerProductsInput, UserUncheckedUpdateWithoutBuyerProductsInput>
    create: XOR<UserCreateWithoutBuyerProductsInput, UserUncheckedCreateWithoutBuyerProductsInput>
  }

  export type UserUpdateWithoutBuyerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBuyerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutProductsInput = {
    update: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type UserUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DatabaseUpsertWithoutProductsInput = {
    update: XOR<DatabaseUpdateWithoutProductsInput, DatabaseUncheckedUpdateWithoutProductsInput>
    create: XOR<DatabaseCreateWithoutProductsInput, DatabaseUncheckedCreateWithoutProductsInput>
  }

  export type DatabaseUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutDatabaseNestedInput
    statistics?: StatisticsUpdateOneWithoutDatabaseNestedInput
  }

  export type DatabaseUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    statisticsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutInvoicesInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvoicesInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type UserUpsertWithoutInvoicesInput = {
    update: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type UserUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMy_ticketsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMy_ticketsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMy_ticketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMy_ticketsInput, UserUncheckedCreateWithoutMy_ticketsInput>
  }

  export type TicketsCreateWithoutResponsesInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutMy_ticketsInput
    parent?: TicketsCreateNestedOneWithoutResponsesInput
  }

  export type TicketsUncheckedCreateWithoutResponsesInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    reporterId: string
    ticketsId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketsCreateOrConnectWithoutResponsesInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutResponsesInput, TicketsUncheckedCreateWithoutResponsesInput>
  }

  export type TicketsCreateWithoutParentInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutMy_ticketsInput
    responses?: TicketsCreateNestedManyWithoutParentInput
  }

  export type TicketsUncheckedCreateWithoutParentInput = {
    id?: string
    title: string
    category: string
    message: string
    status: string
    reporterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    responses?: TicketsUncheckedCreateNestedManyWithoutParentInput
  }

  export type TicketsCreateOrConnectWithoutParentInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutParentInput, TicketsUncheckedCreateWithoutParentInput>
  }

  export type UserUpsertWithoutMy_ticketsInput = {
    update: XOR<UserUpdateWithoutMy_ticketsInput, UserUncheckedUpdateWithoutMy_ticketsInput>
    create: XOR<UserCreateWithoutMy_ticketsInput, UserUncheckedCreateWithoutMy_ticketsInput>
  }

  export type UserUpdateWithoutMy_ticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMy_ticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketsUpsertWithoutResponsesInput = {
    update: XOR<TicketsUpdateWithoutResponsesInput, TicketsUncheckedUpdateWithoutResponsesInput>
    create: XOR<TicketsCreateWithoutResponsesInput, TicketsUncheckedCreateWithoutResponsesInput>
  }

  export type TicketsUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutMy_ticketsNestedInput
    parent?: TicketsUpdateOneWithoutResponsesNestedInput
  }

  export type TicketsUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    reporterId?: StringFieldUpdateOperationsInput | string
    ticketsId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsUpsertWithWhereUniqueWithoutParentInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutParentInput, TicketsUncheckedUpdateWithoutParentInput>
    create: XOR<TicketsCreateWithoutParentInput, TicketsUncheckedCreateWithoutParentInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutParentInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutParentInput, TicketsUncheckedUpdateWithoutParentInput>
  }

  export type TicketsUpdateManyWithWhereWithoutParentInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutResponsesInput>
  }

  export type DatabaseCreateWithoutStatisticsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    owner: UserCreateNestedOneWithoutDatabaseInput
    products?: ProductsCreateNestedManyWithoutDatabaseInput
  }

  export type DatabaseUncheckedCreateWithoutStatisticsInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    products?: ProductsUncheckedCreateNestedManyWithoutDatabaseInput
  }

  export type DatabaseCreateOrConnectWithoutStatisticsInput = {
    where: DatabaseWhereUniqueInput
    create: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
  }

  export type DatabaseUpsertWithoutStatisticsInput = {
    update: XOR<DatabaseUpdateWithoutStatisticsInput, DatabaseUncheckedUpdateWithoutStatisticsInput>
    create: XOR<DatabaseCreateWithoutStatisticsInput, DatabaseUncheckedCreateWithoutStatisticsInput>
  }

  export type DatabaseUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutDatabaseNestedInput
    products?: ProductsUpdateManyWithoutDatabaseNestedInput
  }

  export type DatabaseUncheckedUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    products?: ProductsUncheckedUpdateManyWithoutDatabaseNestedInput
  }

  export type UserCreateWithoutBtc_addressesInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    news?: NewsCreateNestedManyWithoutAuthorInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBtc_addressesInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBtc_addressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBtc_addressesInput, UserUncheckedCreateWithoutBtc_addressesInput>
  }

  export type UserUpsertWithoutBtc_addressesInput = {
    update: XOR<UserUpdateWithoutBtc_addressesInput, UserUncheckedUpdateWithoutBtc_addressesInput>
    create: XOR<UserCreateWithoutBtc_addressesInput, UserUncheckedCreateWithoutBtc_addressesInput>
  }

  export type UserUpdateWithoutBtc_addressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBtc_addressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNewsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    actions?: ActionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNewsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    actions?: ActionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpsertWithoutNewsInput = {
    update: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpdateWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    actions?: ActionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    actions?: ActionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutActionsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsCreateNestedOneWithoutUserInput
    Sessions?: SessionsCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsCreateNestedManyWithoutBuyerInput
    Reference?: UserCreateNestedManyWithoutReferenceInput
    reference?: UserCreateNestedOneWithoutReferenceInput
    Products?: ProductsCreateNestedManyWithoutUserInput
    Database?: DatabaseCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceCreateNestedManyWithoutUserInput
    my_tickets?: TicketsCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesCreateNestedManyWithoutUserInput
    news?: NewsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutActionsInput = {
    id?: string
    email: string
    username: string
    role: string
    password: string
    ballance?: number | null
    secure?: boolean | null
    status?: string | null
    fee?: number | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    settings?: SettingsUncheckedCreateNestedOneWithoutUserInput
    Sessions?: SessionsUncheckedCreateNestedManyWithoutUserInput
    SellerProducts?: ProductsUncheckedCreateNestedManyWithoutSellerInput
    BuyerProducts?: ProductsUncheckedCreateNestedManyWithoutBuyerInput
    Reference?: UserUncheckedCreateNestedManyWithoutReferenceInput
    Products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    Database?: DatabaseUncheckedCreateNestedManyWithoutOwnerInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    my_tickets?: TicketsUncheckedCreateNestedManyWithoutReporterInput
    btc_addresses?: BTC_AddressesUncheckedCreateNestedManyWithoutUserInput
    news?: NewsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActionsInput, UserUncheckedCreateWithoutActionsInput>
  }

  export type UserUpsertWithoutActionsInput = {
    update: XOR<UserUpdateWithoutActionsInput, UserUncheckedUpdateWithoutActionsInput>
    create: XOR<UserCreateWithoutActionsInput, UserUncheckedCreateWithoutActionsInput>
  }

  export type UserUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUpdateManyWithoutBuyerNestedInput
    Reference?: UserUpdateManyWithoutReferenceNestedInput
    reference?: UserUpdateOneWithoutReferenceNestedInput
    Products?: ProductsUpdateManyWithoutUserNestedInput
    Database?: DatabaseUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUpdateManyWithoutUserNestedInput
    news?: NewsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: SettingsUncheckedUpdateOneWithoutUserNestedInput
    Sessions?: SessionsUncheckedUpdateManyWithoutUserNestedInput
    SellerProducts?: ProductsUncheckedUpdateManyWithoutSellerNestedInput
    BuyerProducts?: ProductsUncheckedUpdateManyWithoutBuyerNestedInput
    Reference?: UserUncheckedUpdateManyWithoutReferenceNestedInput
    Products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    Database?: DatabaseUncheckedUpdateManyWithoutOwnerNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    my_tickets?: TicketsUncheckedUpdateManyWithoutReporterNestedInput
    btc_addresses?: BTC_AddressesUncheckedUpdateManyWithoutUserNestedInput
    news?: NewsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type SessionsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    current?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutBuyerProductsNestedInput
    User?: UserUpdateOneWithoutProductsNestedInput
    database?: DatabaseUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUncheckedUpdateManyWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: UserUpdateOneRequiredWithoutSellerProductsNestedInput
    User?: UserUpdateOneWithoutProductsNestedInput
    database?: DatabaseUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUncheckedUpdateManyWithoutBuyerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutReferenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ballance?: NullableFloatFieldUpdateOperationsInput | number | null
    secure?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: UserUpdateOneRequiredWithoutSellerProductsNestedInput
    buyer?: UserUpdateOneWithoutBuyerProductsNestedInput
    database?: DatabaseUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUncheckedUpdateManyWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    databaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    products?: ProductsUpdateManyWithoutDatabaseNestedInput
    statistics?: StatisticsUpdateOneWithoutDatabaseNestedInput
  }

  export type DatabaseUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    statisticsId?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductsUncheckedUpdateManyWithoutDatabaseNestedInput
  }

  export type DatabaseUncheckedUpdateManyWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    statisticsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: TicketsUpdateOneWithoutResponsesNestedInput
    responses?: TicketsUpdateManyWithoutParentNestedInput
  }

  export type TicketsUncheckedUpdateWithoutReporterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ticketsId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: TicketsUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TicketsUncheckedUpdateManyWithoutMy_ticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ticketsId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BTC_AddressesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BTC_AddressesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BTC_AddressesUncheckedUpdateManyWithoutBtc_addressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    received_btc?: FloatFieldUpdateOperationsInput | number
    received_usd?: FloatFieldUpdateOperationsInput | number
    currentBtcPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsUncheckedUpdateManyWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductsUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: UserUpdateOneRequiredWithoutSellerProductsNestedInput
    buyer?: UserUpdateOneWithoutBuyerProductsNestedInput
    User?: UserUpdateOneWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateWithoutDatabaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    old_price?: NullableFloatFieldUpdateOperationsInput | number | null
    cc_num?: StringFieldUpdateOperationsInput | string
    cvv2?: StringFieldUpdateOperationsInput | string
    skip?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    sort_code?: NullableStringFieldUpdateOperationsInput | string | null
    misc?: NullableStringFieldUpdateOperationsInput | string | null
    exp_date?: NullableStringFieldUpdateOperationsInput | string | null
    exp_month?: NullableIntFieldUpdateOperationsInput | number | null
    exp_year?: NullableIntFieldUpdateOperationsInput | number | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    mmn?: NullableStringFieldUpdateOperationsInput | string | null
    vbv?: NullableStringFieldUpdateOperationsInput | string | null
    acc_no?: NullableStringFieldUpdateOperationsInput | string | null
    driver_license?: NullableStringFieldUpdateOperationsInput | string | null
    dbVersion?: IntFieldUpdateOperationsInput | number
    canRefund?: BoolFieldUpdateOperationsInput | boolean
    refundExpire?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wantRefund?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutMy_ticketsNestedInput
    responses?: TicketsUpdateManyWithoutParentNestedInput
  }

  export type TicketsUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    reporterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: TicketsUncheckedUpdateManyWithoutParentNestedInput
  }

  export type TicketsUncheckedUpdateManyWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    reporterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}