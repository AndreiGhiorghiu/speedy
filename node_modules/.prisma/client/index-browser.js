
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActionsScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  data: 'data',
  userId: 'userId',
  created_at: 'created_at'
});

exports.Prisma.BTC_AddressesScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  address: 'address',
  status: 'status',
  received_btc: 'received_btc',
  received_usd: 'received_usd',
  currentBtcPrice: 'currentBtcPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DatabaseScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  statisticsId: 'statisticsId'
});

exports.Prisma.InvoiceScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  total: 'total',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.NewsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  priority: 'priority',
  description: 'description',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductsScalarFieldEnum = makeEnum({
  id: 'id',
  sellerId: 'sellerId',
  buyerId: 'buyerId',
  status: 'status',
  price: 'price',
  old_price: 'old_price',
  cc_num: 'cc_num',
  cvv2: 'cvv2',
  skip: 'skip',
  full_name: 'full_name',
  first_name: 'first_name',
  last_name: 'last_name',
  sort_code: 'sort_code',
  misc: 'misc',
  exp_date: 'exp_date',
  exp_month: 'exp_month',
  exp_year: 'exp_year',
  zip: 'zip',
  address: 'address',
  address2: 'address2',
  city: 'city',
  country: 'country',
  ip: 'ip',
  type: 'type',
  state: 'state',
  phone: 'phone',
  dob: 'dob',
  ssn: 'ssn',
  email: 'email',
  password: 'password',
  mmn: 'mmn',
  vbv: 'vbv',
  acc_no: 'acc_no',
  driver_license: 'driver_license',
  dbVersion: 'dbVersion',
  canRefund: 'canRefund',
  refundExpire: 'refundExpire',
  wantRefund: 'wantRefund',
  userId: 'userId',
  databaseId: 'databaseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SessionsScalarFieldEnum = makeEnum({
  id: 'id',
  current: 'current',
  userId: 'userId',
  expiresAt: 'expiresAt'
});

exports.Prisma.SettingsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  importerPresets: 'importerPresets',
  theme: 'theme',
  canNotify: 'canNotify',
  canAlert: 'canAlert',
  alerts: 'alerts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SiteScalarFieldEnum = makeEnum({
  id: 'id',
  ballance: 'ballance',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StatisticsScalarFieldEnum = makeEnum({
  id: 'id',
  databaseId: 'databaseId',
  data: 'data'
});

exports.Prisma.TicketsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  category: 'category',
  message: 'message',
  status: 'status',
  reporterId: 'reporterId',
  ticketsId: 'ticketsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  role: 'role',
  password: 'password',
  ballance: 'ballance',
  secure: 'secure',
  status: 'status',
  fee: 'fee',
  referenceId: 'referenceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Sessions: 'Sessions',
  Settings: 'Settings',
  Database: 'Database',
  Products: 'Products',
  Invoice: 'Invoice',
  Tickets: 'Tickets',
  Site: 'Site',
  Statistics: 'Statistics',
  BTC_Addresses: 'BTC_Addresses',
  News: 'News',
  Actions: 'Actions'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
