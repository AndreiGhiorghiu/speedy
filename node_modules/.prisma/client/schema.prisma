// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique

  role String

  password String
  ballance Float? @default(0.0)

  secure Boolean? @default(false)

  status String? @default("pending")

  fee Float? @default(0.0)

  settings Settings?
  Sessions Sessions[]

  SellerProducts Products[] @relation("seller")
  BuyerProducts  Products[] @relation("buyer")

  Reference   User[]  @relation("reference")
  reference   User?   @relation(name: "reference", fields: [referenceId], references: [id])
  referenceId String?

  Products Products[]
  Database Database[] @relation("owner")
  invoices Invoice[]  @relation("userInvoice")

  my_tickets    Tickets[]       @relation("tickets_reporter")
  btc_addresses BTC_Addresses[] @relation("user_btc")
  news          News[]          @relation("user_news")
  actions       Actions[]       @relation("user_actions")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Sessions {
  id        String   @id @default(uuid())
  current   String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Settings {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  importerPresets String  @default("[]")
  theme           String  @default("dark")
  canNotify       Boolean @default(true)
  canAlert        Boolean @default(true)
  alerts          String  @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Database {
  id String @id @default(uuid())

  name String

  owner   User   @relation(name: "owner", fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  status String @default("{'1':'pending'}")

  products Products[]

  statistics   Statistics? @relation(fields: [statisticsId], references: [id])
  statisticsId String?     @unique
}

model Products {
  id String @id @default(uuid())

  seller   User   @relation(name: "seller", fields: [sellerId], references: [id])
  sellerId String

  buyer   User?   @relation(name: "buyer", fields: [buyerId], references: [id])
  buyerId String?

  status String @default("none")

  price     Float
  old_price Float?

  cc_num String
  cvv2   String

  skip           String?
  full_name      String?
  first_name     String?
  last_name      String?
  sort_code      String?
  misc           String?
  exp_date       String?
  exp_month      Int?
  exp_year       Int?
  zip            String?
  address        String?
  address2       String?
  city           String?
  country        String?
  ip             String?
  type           String?
  state          String?
  phone          String?
  dob            String?
  ssn            String?
  email          String?
  password       String?
  mmn            String?
  vbv            String?
  acc_no         String?
  driver_license String?

  dbVersion Int @default(1)

  canRefund    Boolean   @default(false)
  refundExpire DateTime?
  wantRefund   Boolean   @default(false)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  database   Database @relation(fields: [databaseId], references: [id])
  databaseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Invoice {
  id String @id @default(uuid())

  code  String
  total Float

  status String @default("pending")

  user   User   @relation(name: "userInvoice", fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tickets {
  id String @id @default(uuid())

  title    String
  category String
  message  String

  status String

  reporter   User   @relation(name: "tickets_reporter", fields: [reporterId], references: [id])
  reporterId String

  parent    Tickets? @relation(name: "ticket_parent", fields: [ticketsId], references: [id])
  ticketsId String?

  responses Tickets[] @relation("ticket_parent")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Site {
  id       String @id @default(uuid())
  ballance Float
  data     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Statistics {
  id String @id @default(uuid())

  databaseId String?
  Database   Database?

  data String
}

model BTC_Addresses {
  id String @id @default(uuid())

  user   User   @relation(name: "user_btc", fields: [userId], references: [id])
  userId String

  address String
  status  String @default("pending")

  received_btc    Float @default(0)
  received_usd    Float @default(0)
  currentBtcPrice Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model News {
  id String @id @default(uuid())

  title       String
  priority    String @default("low")
  description String

  author   User   @relation(name: "user_news", fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Actions {
  id   String @id @default(uuid())
  type String
  data String

  user   User?   @relation(name: "user_actions", fields: [userId], references: [id])
  userId String?

  created_at DateTime @default(now())
}
