"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsconfigPathsPlugin = void 0;
var fs_1 = __importDefault(require("fs"));
var typescript_1 = require("typescript");
var find_up_1 = __importDefault(require("find-up"));
var strip_json_comments_1 = __importDefault(require("strip-json-comments"));
var NAME = require('../package.json').name;
var debug = require('debug')(NAME);
function TsconfigPathsPlugin(_a) {
    var _b = _a.name, name = _b === void 0 ? NAME : _b, _c = _a.absolute, absolute = _c === void 0 ? true : _c, onResolved = _a.onResolved, tsconfig = _a.tsconfig;
    debug('setup');
    var compilerOptions = loadCompilerOptions(tsconfig);
    return {
        name: name,
        setup: function setup(_a) {
            var _this = this;
            var onResolve = _a.onResolve;
            onResolve({ filter: /.*/ }, function (args) { return __awaiter(_this, void 0, void 0, function () {
                var hasMatchingPath, resolvedModule, resolvedFileName, resolved;
                return __generator(this, function (_a) {
                    hasMatchingPath = Object.keys((compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.paths) || {}).some(function (path) {
                        return new RegExp(path.replace('*', '\\w*')).test(args.path);
                    });
                    if (!hasMatchingPath) {
                        return [2 /*return*/, null];
                    }
                    resolvedModule = typescript_1.nodeModuleNameResolver(args.path, args.importer, compilerOptions || {}, typescript_1.sys).resolvedModule;
                    if (!resolvedModule) {
                        return [2 /*return*/, null];
                    }
                    resolvedFileName = resolvedModule.resolvedFileName;
                    if (!resolvedFileName || resolvedFileName.endsWith('.d.ts')) {
                        return [2 /*return*/, null];
                    }
                    resolved = absolute
                        ? typescript_1.sys.resolvePath(resolvedFileName)
                        : resolvedFileName;
                    if (onResolved) {
                        onResolved(resolved);
                    }
                    return [2 /*return*/, {
                            path: resolved,
                        }];
                });
            }); });
        },
    };
}
exports.TsconfigPathsPlugin = TsconfigPathsPlugin;
function loadJSON(p) {
    try {
        var data = fs_1.default.readFileSync(p).toString();
        data = strip_json_comments_1.default(data);
        return JSON.parse(data);
    }
    catch (e) {
        throw new Error("Cannot load json for '" + p + "'");
    }
}
function loadCompilerOptions(tsconfig) {
    if (!tsconfig) {
        var configPath = find_up_1.default.sync(['tsconfig.json', 'jsconfig.json']);
        if (configPath) {
            var config = loadJSON(configPath);
            return config['compilerOptions'] || {};
        }
    }
    if (typeof tsconfig === 'string') {
        if (fs_1.default.existsSync(tsconfig)) {
            var config = loadJSON(tsconfig);
            return config['compilerOptions'] || {};
        }
    }
    if (tsconfig && tsconfig['compilerOptions']) {
        return tsconfig['compilerOptions'];
    }
    return {};
}
exports.default = TsconfigPathsPlugin;
//# sourceMappingURL=index.js.map